#+Title: Create Initial Software Architecture Assignment
#+INCLUDE: "./org/header.org-in" org


* About This Sprint
  This sprint reviews how to describe a non-trivial software system in the form of a software architecture.  
* User Stories covered in this Sprint
  - As a software designer I want to be able to divide my design into manageable chunks so that I can get a better overview.
  - As a software designer I want to address the quality requirements of the software system early on so that they are not missed.
  - As a software designer I want to address the quality requirements of the software system in the most appropriate way to facilitate the rest of the development project.
* Learning Material
** Book Chapters
   - {{{larman}}}, Chapters:
     33. [@33] Architecture Analysis
     34. Logical Architecture Refinement
     38. [@38] UML Deployment and Component Diagrams
     39. Documenting Architecture: UML & the N+1 View Model
** Screencasts
   - [[https://youtu.be/7rTe0-2Ewak][Architecture Styles]]
** TODO Lectures						   :noexport:
** Books and Articles
   - L. Bass, P. Clements, and R. Kazman. /Software Architecture in Practice, Third Edition./ Addison-Wesley Publishing Co., Reading MA, 2012.
   - C. Hofmeister, R. Nord, and D. Soni. /Applied Software Architecture./ Addison-Wesley, Reading MA, 2000.
   - R. Kazman, L. Bass, M. Webb, and G. Abowd. /SAAM: A method for analyzing the properties of software architectures./ In Proceedings of the 16th international conference on Software engineering, pages 81–90. IEEE Computer Society Press, 1994.
   - P.B. Kruchten, "The 4+ 1 view model of architecture." /IEEE software/ 12.6 (1995): 42-50.
   - M. Lindvall, R. T. Tvedt, and P. Costa. An empirically-based process for software architecture evaluation. /Empirical Software Engineering/, 8:83–108, 2003.
   - M. Svahnberg and F. Mårtensson. Six years of evaluating software architectures in student projects. /Journal of Systems & Software/, 80(11):1893–1901, 2007.
** Further Reading						   :noexport:
* Experiential Learning
** Assignment: Create Initial Software Architecture
   Create an initial software architecture for your system.

   {{{tasks}}}
   - Which quality attributes are relevant for your system?
   - Based on what you currently know, structure your system into different modules that have high coherence and low coupling.
     - Try to think about localising specific areas of functionality into separate modules.
   - Do you need to model your system from different viewpoints (e.g. modules, threads and processes, data flow)?
     - If so, create a model for each viewpoint.
     - Make sure your viewpoints are consistent with each other.
     - If you do not need several viewpoints, then why not?
   - Motivate and reason about what traits in your system makes it require or not require specific viewpoints.

#+BEGIN_info
{{{DocStructure}}}

{{{assignment(Initial Software Architecture)}}}
#+INCLUDE: "./DocStruct.org" org

3. [@3] Quality Attributes
   Discuss quality attributes that are important for your system. Motivate why.
4. Viewpoints
  Discuss your choices of viewpoints.
5. Viewpoints
   - Create one section for each of your viewpoints.
   - Model your system from the perspective of the viewpoint in a suitable notation (tip: You may find the UML Package notation useful)
   - Describe the entities in your model. Remember that associations between entities also carry meaning in an architecture model and needs to be explained.
   - Describe which particular design concerns that you are addressing with the help of the viewpoint.
#+END_info

{{{commit}}}

#+BEGIN_tip
{{{condSat}}}
When marking this part of the assignment we are looking for the following:

0. [@0] Does the title page contain a table with authors and author contribution?
1. Size of assignment: Is the system described from at least one and preferrably two to three viewpoints?
2. Size of assignment: Does each viewpoint contain 5-15 entities?
3. Are important quality attributes described and motivated?
4. Are the viewpoints motivated? Is there a reasoning about why or why not certain viewpoints are needed?
5. Is there a legend for each viewpoint that describes the types of entities and connections?
6. Are the entities and connections in each viewpoint described?
7. Does each viewpoint/entity have high cohesion and low coupling?
8. Is there a described strategy for how classes are allocated to different modules/entities?
9. IS this strategy followed?
#+END_tip
* Sprint Acceptance Tests
  You are done with this sprint when:
  - You have considered which quality attributes are relevant for your system.
  - You have created an initial software architecture for your system.
  - You have committed/pushed the created documents to your project repository


  You may also have
  - Updated your Sprint Test Plan
  - Updated your Course Backlog   
    
