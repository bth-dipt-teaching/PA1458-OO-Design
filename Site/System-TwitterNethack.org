#+Title: System Description: TwitterNethack
#+INCLUDE: "./org/header.org-in" org

* About this Text
  This text introduces the system that you are expected to use in your assignments. 

  [[./images/Icon-System-L.jpg]]
* Introduction
[[http://www.nethack.org][Nethack]] is a classic internet game since long before we used to call it "the internet". The idea of the game is to explore a randomly generated dungeon, collect stuff and use it to fight with other stuff (or not, which may be a better alternative in many cases). The original game is text-based and two-dimensional.

In this adaptation of the game, there are some new avenues of functionality to explore:

- You shall enable using Twitter to dynamically generate the map.
- You may make the game 3D.
- You may make the game dialogue-based rather than ascii-graphics based.
- You shall make a multi-player version of the game.

There is a lot of functionality in NetHack and you will not have time to complete it all in this course. You are therefore expected to select and document a reasonable subset of the functionality.

Please see the [[http://www.nethack.org/v331/Guidebook.html][Guide Book]] for more information on how to play the original Nethack.

* Minimal Requirements
Your solution shall /at least/ contain:

1. An opening screen where you can start a new game or join an existing game.
2. A screen where you can setup your player.
3. A labyrinth where your character moves around. This may be represented in different ways:
   - The character may move around with the help of arrow keys inside each cave (ASCII-art version)
   - The character may move between different caves and interact via a GUI (Dialogue-based version)
   - The character may move around in a 3D world with an "over-the-shoulder" perspective (3D version)
4. A selection of other characters that move freely in the labyrinth. (Note: the original NetHack is turn-based, you will have to modify this so that the characters move independently)
   - Interaction dialogues with other characters. For example you may enter into a philosophical debate with a troll, you may fight an ogre, you may play chess with a reaper, or you may ignore a boggart.
5. A selection of other items to pick up and drop in the labyrinth.
   - Interaction dialogues with those other items. For example, you may view the history of a sword, mix a potion with other items.
   - Items also have a default action, "use", that means e.g. "wield sword", "throw rock", or "drink potion".
   - Items can be sub-types of other items. For example, you may have:
     - ~Weapons~, with sub-types ~projectile weapons~ and ~cutting weapons~. Cutting weapons, in turn, have sub-types such as ~knives~ and ~swords~. Projectile weapons can for example be ~slingshots~ and ~crossbows~. You would also need ~ammunition~ for some of your weapons.
     - On the topic of weapons, the damage inflicted by a weapon shall be a combination of the weapon itself, the wielder's experience, the character type, and a certain element of randomness.
6. Multiplayer. Several players shall be able to play in the same game at once.
   - Tip: You may implement this either with a common server, a common database, or in a distributed manner where one player is the owner of the game.
   - You shall be able to interact with other players through dialogues, but only when you are in the same cave. You shall minimally be able to:
     - chat with other players
     - use whatever you are carrying on them
     - give them items that you are carrying
* Map Generation
It shall initially be possible to generate the dungeon in two ways:

- With the help of Twitter.
- With a random generator that works off-line.

It shall also be possible to extend with other dungeon generators. For example using a map description in a text file as input (This will be needed anyway to load an existing game).

** Twitter
Using Twitter to generate the dungeon is done through Twitters [[https://dev.twitter.com/][developers API]], and its REST API in particular. A small example that goes through all the necessary motions for you in PHP is available here: http://www.w3resource.com/API/twitter-rest-api/

Use this as follows:

- Start with a "random" timeline (configure during game setup)
- One timeline forms the basis for one cave.
- Scan the tweets on that page, looking for specific keywords. When particular keywords are found, this signifies the prescense of certain items or characters in the cave. For example, "William Shatner" may mean a boulder or a statue, "kaffekopp" may mean a weapon, and "#AIK" may mean that there is a monster in the cave. There shall be a random number of items but not more than three in each cave.
- Scan the page for other timelines ("@xxx") and use a random number but not more than three of these as exits to other caves. One exit goes back to the timeline you came from. Try to strike a balance between recurring timelines (caves you have already visited) and new timelines. If you re-enter an old cave from a new direction, you will of course add a new exit to that cave.
- When you enter a new cave, your system shall briefly display information about the "owner" of the cave.
** Random Generator
   The random generator works in the same way as the twitter generator, but uses a random number generator to decide about doors and items in each cave rather than text analysis.

* Extras
- The labyrinth may be in three dimensions, so that you have different floors.
- There may be a map that is either shown all the time, or that can be superimposed over the current view.
- There may be several light sources overhead, giving the impression of walking through a scarcely lit corridor.

We do not expect these extras to be implemented in your version of your system. What we /do/ expect, however, is that you create a design that can easily accommodate these changes, and that you have documented how you would implement them.

