#+Title: Class and Package Diagram Assignment
#+INCLUDE: "./org/header.org-in" org

* About This Sprint
  This sprint discusses how to identify and model interactions between entities in UML interaction diagrams. The sprint also covers how the interaction diagrams produce material that is used to create UML Class Diagrams.

  The sprint particularly focuses on expressing the system design as a set of classes and their relations, further structured with the help of UML Packages.
* User Stories covered in this Sprint
  - As a software designer I want to understand how domain concepts interact so that I can select the best way to implement these interactions.
  - As a software designer I want to model both the /dynamic behaviour/ as well as the /static structure/ of the application so that I can communicate both to the developers.
  - As a software implementer I want to know which methods and attributes each class contains so that I can implement them.
* Learning Material
Please review the sprints on
- [[./Interactions.org][Good Interactions]]
- [[./Interactions-Structure.org][Interactions and Structure]]
- [[./A-Package-Diagram.org][Package Diagram Assignment]]
- [[./A-Interaction-Diagrams.org][Interaction Diagrams Assignment]]
* Experiential Learning
** Assignment: Class and Package Diagram
    In this assignment you use your UML Interaction Diagrams and extract the static structure necessary in the form of a UML Class Diagram. Furthermore, you divide your classes into the packages that you have previously identified. This assignment builds upon the previously created package diagram.

    {{{tasks}}}
    - For each object in each interaction diagram, create or refine the corresponding class in a UML Class Diagram.
    - Put your classes into the package from your Package Diagram you think is most suitable for each class.
    - Add all methods that are being called on each object in your interaction diagram to the corresponding class.
    - If two objects are interacting in your interaction diagrams, add an association between the corresponding classes.
    - Identify attributes that each object must have, and add these to the corresponding class.
    - Refine the associations in your UML Class Diagram and consider whether they should be simple associations, aggregations, or compositions.
    - Refine the associations in your UML Class Diagram with respect to multiplicity
    - Refine the attributes in each class in your UML Class Diagram and add types and visibility.
    - Refine the methods in each class in your UML Class Diagram and add return types, parameter types, and visibility.

#+BEGIN_info
{{{docStructure}}}

{{{assignment(Class and Package Diagram)}}}
#+INCLUDE: "./DocStruct.org" org

3. [@3] Class and Package Diagram
   
   Present the final UML Class Diagram (divided into Packages).

   Briefly describe each package and its responsibilities.
#+END_info

{{{commit}}}

#+BEGIN_tip
{{{condSat}}}

When marking this part of the assignment we are looking for the following:

0. [@0] Does the title page contain a table with authors and author contribution?
1. Size of assignment: Does the UML Class Diagram contain 15-30 Classes?
2. Do all objects from the interaction diagrams in the previous assignment have a corresponding class?
3. Are the classes placed into relevant packages?
4. Do all method calls from the interaction diagrams in the previous assignment have a corresponding method in the right class?
5. Are all interactions in the interaction diagrams accurately represented as associations between classes?
6. Where applicable, are associations between classes modelled as aggregations or compositions?
7. Are there multiplicity indicators on associations? Are they used correctly?
8. Do all methods have a visibility indicator, a return type, types for all parameters, and a relevant name?
9. Do all attributes have a visibility indicator, a type, and a relevant name?
10. Are there any missing attributes?
#+END_tip

* Sprint Acceptance Tests
  You are done with this sprint when:
  - You have an understanding of how the dynamic behaviour of the system is used to identify the static structure
  - You have an understanding of how you may use your previous analysis, in terms of Use Cases, System Sequence Diagrams, and Domain Model to initiate your design of the dynamic behaviour.
  - You have created a Class and Package Diagrams document.
  - You have committed/pushed these documents to your project repository.

  You may also have
  - Updated your Sprint Test Plan
  - Updated your Course Backlog   
