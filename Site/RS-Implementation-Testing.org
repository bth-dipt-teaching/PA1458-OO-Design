#+Title: Release Sprint: Implementation and Testing
#+INCLUDE: "./org/header.org-in" org


* About this Sprint
  This is a /release sprint/. This means that you package things that you have done in other sprints in order to create a release (an assignment delivery). You are expected to integrate what you have learnt previously and test/evaluate your release candidate to maximise your potential for passing the assignment.
* User Stories covered in this Sprint
  - As a teacher I want to evaluate the students' ability to transfer a theoretical design into a workable software solution so that I know they fulfil the corresponding course goals.
  - As a teacher I want to evaluate the students' ability to transfer a theoretical design into a workable software solution so that I know they have an understanding of the difficulties this entails.
  - As a teacher I want to evaluate the students' ability to transfer a theoretical design into a workable software solution so that I know they have an understanding of how to read a design consisting of several viewpoints (e.g. dynamic and static) and combine them in a software solution.
  - As a teacher I want to evaluate the students' ability to transfer a theoretical design into a workable software solution so that I know they understand how to maintain updated design documentation alongside with an implementation.
  - As a teacher I want to evaluate the students' ability to test an implemented system according to a test plan so that I know they understand how to translate a design to a test plan and how to execute this test plan.

* Course Goals covered in this Sprint
- (PA1415) i grupp kunna implementera ett mjukvaruprogram inom rimlig tid, baserat på en kravspecifikation och en objektorienterad design.
- (PA1415) på en grundläggande nivå i grupp kunna planera och genomföra testning av producerad programvara, baserat på en kravspecifikation.

  *Färdigheter och förmåga*
  - (PA1435, PA1443) kunna korrekt transformera en objektorienterad design till källkod.

  *Värderingsförmåga och förhållningssätt*
  - (PA1434, PA1435) kunna analysera källkod för eventuella förbättringar.
  - (PA1434, PA1435, PA1443) kunna analysera och kritiskt diskutera en design för eventuella förbättringar.
* Introduction
  In this release sprint you implement and test your design for your first iteration.

#+BEGIN_SRC dot :file ./images/FImpl1.png
digraph{
compound=true;
#rankdir=LR;
size=10;
node [colorscheme="accent4", style=radial, fillcolor=1, shape=note];

sd [label="System Description", shape=parallelogram];
sd -> luc [lhead=cluster_a0];

subgraph cluster_a0 {
label="3 week roll call\nList of Use Cases";
luc [label="Use Case 1\nUse Case 2\n...\nUse case n"];
}

luc2 [label="Use Case 1\nUse Case 2\n...\nUse case n", style=dashed];
luc2 -> a1 [lhead=cluster_a1];

subgraph cluster_a1 {
label="User Stories\nand\nUse Case Diagrams";
a1 [label="Use Case Overview\nImplementation Plan\n(User Stories)" shape=folder];
duc [label="Detailed Use Cases for Iteration 1\n----------\nUse Case 1\nUse Case 2\n...\nUse Case n"];
a1->duc;
}

duc2 [label="Detailed Use Cases for Iteration 1\n----------\nUse Case 1\nUse Case 2\n...\nUse Case n", style=dashed];
duc2 -> ssd [lhead=cluster_a2];

subgraph cluster_a2 {
label="Object Oriented Design";
ssd [label="System Sequence Diagrams" shape=ellipse, style=dashed];
id [label="Interaction Diagrams\n----------\nPrioritised List of Use Cases (repeated)\nSystem Events\nInteraction Diagrams\n"];
cd [label="Class and Package Diagram"];
ssd->id->cd;
}

cdd [label="Class and Package Diagram", style=dashed];
cdd -> cd2 [lhead=cluster_a3];

subgraph cluster_a3 {
label="Implementation and Testing";
cd2 [label="Class and Package Diagram (Revised)"];
im [label="Implementation"];
tst [label="Results of Testing"];
cd2 -> im [dir="both"];
im -> tst [dir="both"];
}

#sd -> a1
#sd -> luc -> a1
#duc -> ssd
# cd -> cd2
}
#+END_SRC

#+RESULTS:
[[file:./images/FImpl1.png]]


* Learning Material
  Please review the sprints concerning
  - [[./Testing.org][Testing]]
  - [[./Interactions-Structure.org][Interactions and Structure]]
  - [[./Implementation.org][Implementation and Designing the User Inteface]]
* Experiential Learning
** Assignment: Implement System
   In this assignment you are expected to implement your system according to your own design. You do not need to implement the entire system, but you need to implement enough to:

   - Get a working system with the basic cases for your most important use cases.
   - Show that you have at least partially created all the classes required for a Minimal Viable Product.
   - Show that you understand how to implement a system according to the overall architectural style you have chosen.
   - Show that you understand how to implement any design patterns you make use of. This /probably/ includes at least one instance of the observer pattern, and possibly one instance of the strategy pattern.
   - Are able to execute your test plan for your most important use cases and see whether your tests adequately exercises the source code or not.
   - Are able to study your implementation and reason about ways to improve it and your design.

   Remember to update your design documentation while you are implementing to reflect any changed design decisions you make.

   {{{Tasks}}}
   - Identify a relevant subset of your system.
   - Implement your system according to your design documentation.
   - Document deviations from your design and update the design documentation accordingly.
   - Execute your test plan on your implemented system and document the results.

   {{{commit}}}

#+BEGIN_tip
{{{condSat}}}

When marking this part of the assignment we are looking for the following:
1. Size of assignment: Does the implemented subset of the system represent a Minimal Viable Product?
2. Does it compile and run?
3. Does the test plan adequately test relevant aspects of the system?
4. Is the design documentation up to date according to what is implemented?
5. Are the students able to show a mapping between the design and the implementation?
6. Are the students able to show a mapping between the design and the test plan?
7. Are the students able to explain what their code does, in particular in relation to their design?
8. Are the students able to identify areas where their implementation may be improved, and reason about why, in particular in relation to their design?
9. Are the students able to identify areas where their design may be improved, and reason about why?
#+END_tip

   
** Assignment Submission   
   {{{submit}}}
   
   Your submission shall include the following documents:
   - [[file:./Interactions-Structure.org::*Assignment: Class and Package Diagram][Class and Package Diagram]]
   - Implementation (Link to Github project is ok)
* Sprint Acceptance Tests
  You are done with this sprint when:
  - [[./org/checked.png]] You have submitted the documents for marking.
  - [[./org/checked.png]] You have received a passing grade from the teacher.

  You may be asked to complement your submission with additional information.

  You may also have:
  - Updated your Sprint Test Plan
  - Updated your Course Backlog   

