#+Title: Interactions and Structure
#+Author: Mikael Svahnberg
#+Email: Mikael.Svahnberg@bth.se
#+EPRESENT_FRAME_LEVEL: 1
#+OPTIONS: email:t <:t todo:t f:t ':t toc:t
#+STARTUP: beamer
#+TODO: TODO(t) | DONE(d!) WAIT(w!)


#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org/org.css" />
#+HTML: <br/>

#+LATEX_CLASS_OPTIONS: [10pt,t,a4paper]
#+BEAMER_THEME: BTH_msv

#+MACRO: pa1415 PA1415 Software Design
#+MACRO: pa1435 PA1435 Object Oriented Design
#+MACRO: pa1434 PA1434 Basic Object Oriented Design
#+MACRO: pa1443 PA1443 Introduction to Software Design and Architecture
#+MACRO: larman C. Larman, /Applying UML and Patterns/, 3rd Edition
#+MACRO: commit Commit and push this document to your project repository.
#+MACRO: submit Submit the assignment as one or several PDFs on It's Learning.
#+MACRO: tasks *Tasks:*
#+MACRO: docStructure *Document Structure:*
#+MACRO: condSat *Conditions of Satisfaction:*
#+MACRO: assignment The title for this Assignment Document is: /$1 for System <system name>/



* About This Sprint
  This sprint discusses how to identify and model interactions between entities in UML interaction diagrams. The sprint also covers how the interaction diagrams produce material that is used to create UML Class Diagrams.
* User Stories covered in this Sprint
  - As a software designer I want to understand how domain concepts interact so that I can select the best way to implement these interactions.
  - As a software designer I want to model both the /dynamic behaviour/ as well as the /static structure/ of the application so that I can communicate both to the developers.
  - As a software implementer I want to know which methods and attributes each class contains so that I can implement them.
* Introduction
   So you have your system events from the UML system sequence diagrams, and you have an idea of the concepts in the problem domain based on your domain model. Your next step is to figure out what should happen inside the system as a consequence of your system events. UML books like to introduce the concept of an /Operation Contract/ at this stage, and spend an impressive amount of time defining all the attributes that you should fill in for each contract. I will not go this far. I will not even require you to write any contracts. As an /analysis tool/, they are quite ok, however.

The takeaway from this sprint is, however, not the actual diagrams. What I want you to realise is that modelling the dynamic behaviour of your system is the /key/ to understanding the static structure. This is the best way to keep your system lean. Yes, you can start with the static structure and model what you /think/ will be needed. You will (a) get much of it wrong and have to go back and fix it later, and (b) add plenty of stuff that will never be used as you thought, so you will add the methods you really need when you develop, and then your design documentation is no longer up to date with what the code does.

#+BEGIN_note
*TL;DR:* Use the /dynamic behaviour/ of your system to extract the least possible amount of /static structure/, to keep your design relevant and lean.
#+END_note

** Contracts
    An operation contract simply documents the system operations. This is ok, and you should really think of doing something like this anyway. If you use e.g. [[http://www.stack.nl/~dimitri/doxygen/][Doxygen]] or the equivalent for your language, you document your system operations in your code so that callers of a function immediately can get an overview of the operation, its parameters, and its return values.
    
    What I would like to focus on, however, is that in this documentation you also list /preconditions/ and -- even more importantly /postconditions/. The preconditions is simply a list of conditions that must be met before this operation can be called. For example, to return change in a cash machine, there must be an ongoing sale and a payment must have been entered.

    The postconditions list what should have happened /inside/ the system as a result of the operation. This is not a narrative description of "first A happens, then B, and finally C". It is simply a description of the final state. Think of it as a stage-and-curtain model. The system is in one state. A curtain goes down and the operation executes. When the curtain is raised again, you note the changes.

[[./images/ICurtainGoat.jpg]]

   To identify /what/ may have changed, you look at your domain model. Instances of some of the concepts from your domain model are involved in the operation (if not, your domain model is incomplete and should be revised). For these instances, the following may occur:

   - an instance of a concept may be created
   - an instance of a concept may be deleted
   - an attribute of an instance may change value
   - an association betwen two instances may be formed
   - an association betwen two instances may be broken

   It is good form to write this in past tense (to remind you that you are only describing what has already happened):

   - An instance of ~Goat~ with the name ~gHarry~ was created.
   - The (x,y) position of the goat ~gHarry~ was set to (10,4).
   - An instance of ~GoatFood~ with the name ~gf~ was created.
   - ~gf~ was associated with ~gHarry~.
   - The location of ~gf:GoatFood~ was set to the location of ~gHarry:Goat~'s mouth.

   Note that we still don't know /who/ does all of this. We can guess that it is in fact ~gHarry~ that fetches the ~gf:GoatFood~ and puts it in his mouth while going to stand at position (10,4), but we do not know. We also do not know what else may have happened. Where did ~gHarry~ find the food? Was there a clown quartet that rolled a wheelbarrow full of GoatFood on stage and fed it to ~gHarry~ while riding unicycles? Or did we initially create 500 animals on stage and used genetic algorithms to grow and breed on those that most looked like a goat with food in its mouth? We do not know.

   What we /do/ know is that those concepts from the domain model that were used in this contract (and all other contracts) are those that we should model as classes. The attributes that were changed should be added to those classes with the right types. The associations formed or broken should be modelled in our class diagram. We also have an end-state that we can work towards in our interaction diagrams.

#+HTML: <small><small><small><small><small><small><small><small><small>
This here is the specific point from where I am going to get exam answers using Goats in the most horrible ways imaginable. I know this, and yet I wrote this example. What the hell is wrong with me?
#+HTML: </small></small></small></small></small></small></small></small></small>

** Interaction Diagrams
    UML introduces two types of Interaction diagrams, namely /Sequence Diagrams/ and /Collaboration Diagrams/. These express the same thing and so you can use either one. When I was once a young and budding student we only had collaboration diagrams, and for a long while I favoured them because you are able to express more in less space. These days, however, I prefer sequence diagrams because it is easier to follow the order in which operations should be called, and are overall clearer to get an overview of.

    You have already acquainted yourself with sequence diagrams in the form of /System Sequence Diagrams/. The difference to these is that in a sequence diagram there is no restriction to view the system as a black box, as you do in a system sequence diagram. Indeed, the whole point is to now open up your black box and study what is going on /inside/ the box. Identify which entities needs to be involved to solve the system event, which methods that should be called, and in what order.

#+BEGIN_SRC plantuml :file ./images/FSequenceTheatre.png
hide footbox
[-> ":TheatreStage" : action()
activate ":TheatreStage"
":TheatreStage" -> ":EvolutionManager" : getGoat()

activate ":EvolutionManager"
loop while not true goat

create ":Goat"
":EvolutionManager" --> ":Goat" : create()
":EvolutionManager" -> ":Goat" : whosAGoodGoat()
activate ":Goat"
note right : checking all relevant parameters of "Goatiness"
":Goat" --> ":EvolutionManager" : baaa!
deactivate ":Goat"
end
":EvolutionManager" -> ":TheatreStage" : return lastGoat
deactivate ":EvolutionManager"

":TheatreStage" -> ":Goat" : setPosition(10,2)
activate ":Goat"
deactivate ":Goat"

":TheatreStage" -> ":ActorContainer" : add(a)
activate ":ActorContainer"
deactivate ":ActorContainer"
deactivate ":TheatreStage"
#+END_SRC

#+NAME: fig:SequenceTheatre
#+CAPTION: This example is officially getting silly
#+RESULTS:
[[file:./images/FSequenceTheatre.png]]

    A collaboration diagram is perhaps easier to work with on a whiteboard; you can hold more lively discussions, add an object and an interaction arrow without having to re-draw your entire model. On paper, it is less space-consuming. The cost of this is, as stated, that it is more difficult to follow the order in which methods are being called. Consider the same Goat-on-Stage example again. Note how the iteration is merely represented as an asterix ~*~ after the calls involved, and how the nested calls from within the ~EvolutionManager::getGoat()~ call have sub-numbering (1.1 and 1.2, respectively). Imagine if you have a deeper nesting, say four or five levels down, and then try to keep track of whether "1.2.0.3.2" is executed before "1.2.1.3.1" or not.

#+BEGIN_SRC plantuml :file ./images/FCollaborationTheatre.png
left to right direction
object ":TheatreStage" as ts
object ":EvolutionManager" as em
object "g:Goat" as g
object ":ActorContainer" as ac

title :TheatreStage->action()

ts --> em : 1 g=getGoat()
em --> g : 1.1 create()*
em --> g : 1.2 response=whosAGoodGoat()*
ts --> g : 2. setPosition(10,2)
ts --> ac : 3. add(g)
#+END_SRC

#+NAME: fig:CollaborationTheatre
#+CAPTION: Evolving a Goat and Putting it on Stage.
#+RESULTS:
[[file:./images/FCollaborationTheatre.png]]


    One more thing to note here is that you are dealing with /objects/, i.e. instances of your classes or concepts. You are not modelling the platonic /idea/ of a Goat; you are modelling /one specific instance/ of a goat that is interacting with other specific instances. You are not exercising all methods available in a class; you are calling those specific methods that are needed to solve one particular system event, and you are doing this with the necessary concrete parameters.

#+BEGIN_note
Interaction Diagrams model specific /objects/ and their /specific interactions/.
#+END_note    

** Class Diagrams
    From the interaction diagrams, that describe the dynamic behaviour of specific objects, we can now start to extract how the class declarations must look like. The methods that are called on an object are placed in the corresponding class of that object. The associations formed are added to the "owner" class of the association (Usually, it is fairly obvious which class should be the owner of an association. Otherwise, decide now and refactor later). Attributes are more difficult to find, since they are not really that prominent in an interaction diagram. If you have made an operation contract, you can get the (post-operation visibly changed) attributes therefrom, but otherwise you will have to guess a bit based on the methods and the responsibilities each object seem to have.

    I am loath to continue with the previous example but, in the interest of completeness, here goes. First, create the classes used in the example, and add the methods called on each class and the attributes I can guess at. Then, add the relations between classes where the objects call each other. I like to do it in a particular order, and I am revealing the source code for the UML Class Diagram below to show you this order. You are of course free to work in any order you prefer.

#+BEGIN_SRC plantuml :file ./images/FClassTheatre1.png :exports both
' Add Classes, methods, and attributes:
' --------------------
TheatreStage : +action()
EvolutionManager : +Goat getGoat()
EvolutionManager : -lastGoat
Goat : +whosAGoodGoat()
ActorContainer : +add(Actor theActor)
ActorContainer : -list<Actor> myActors


' Relations
' --------------------
TheatreStage - "1" EvolutionManager
EvolutionManager - "*" Goat
TheatreStage -- "1" Goat
TheatreStage -- "1" ActorContainer


' I have decided that Goat needs to be a sub-type of Actor
' This simplifies the ActorContainer to not worry about Goatiness,
' but does need to have a relation to "Actor"
' --------------------
Actor <|-- Goat
ActorContainer o-- "*" Actor
#+END_SRC

#+NAME: fig:ClassTheatre
#+CAPTION: Class Diagram for the Theatre Example
#+RESULTS:
[[file:./images/FClassTheatre1.png]]

As you also may notice, I am adding the class ~Actor~ and introducing an inheritance between ~Actor~ and ~Goat~, to keep the interface of the ~ActorContainer~ class clean. I am also adding visibility to the methods and attributes. For now, all methods appear to be public, and all attributes are private.

Also note that even though in the interaction diagram I store the returned ~Goat~ in the variable ~g~, this variable is only needed for the duration of the ~action()~ method and so does not get added to the class. In general, you should try to keep variables in an as limited scope as possible. If you only need them in a block, declare them inside that block. If you only need them in a method, declare them in that method. If you /must/ have them for as long as your object exist, then add them as attributes to the class. If you need them for as long as the system lives you are most likely doing things wrong, but you might consider making them ~static~ or adopt the ~<<Singleton>>~ pattern. If you need them even longer than that, put them in a database or in a file.

** Moar Classes: Packages
    Preferrably I would like to stop now and put the rest into a separate sprint (and kill the Goat-example once and for all). However, this bit needs to be said, and it will actually help you in your diagrams so I need to put at least a small teaser here.

    Essentially, you now have all the tools necessary to do object oriented design. What we will focus on more in later sprints is how to use pre-existing solution templates and principles to make a /good/ design using the tools you already know after this sprint. There are, however, two major obstacles that we need to address first:
   
    1. You are creating a giant ball of mud, with all your classes thrown into a -- for all intents and purposes -- random order.
    2. You will soon not be able to fit all of your design onto one single paper.

    To expand on Obstacle #1; What is the significance of that ~TheatreStage~ is in the top left corner of Figure [[fig:ClassTheatre]]? What does it mean that ~Actor~ is at the bottom of the diagram? Of course, I have made this figure in [[http://plantuml.com/][plantUML]], which lays out the diagram in an order itself sees fit (since it uses [[http://www.graphviz.org/][GraphViz]] as its backend, the strategy it uses is to minimise the number of arches that needs to cross each other). But even if you are using a CASE tool that allows you to position your classes with absolute coordinates (like a normal drawing program does), there is no inherent semantic meaning in the position of a class.

    Enter the /UML Package Diagram/. In this diagram we take a high-level view of our system and try to define our system as a set of packages, where each package has a well-defined responsibility. We then sort our classes into these packages. This solves Obstacle #2, since we can now move some of the packages to a new page according to some logical principle. If your packages are still too big to fit, you are able to nest packages so that your packages contain more packages.

    To further address Obstacle #1, you also need to define the principles according to which you divide the system into packages. Very crudely, this is what you do in your /Software Architecture/. I say crudely, because there is much more than this to software architectures. For now, let's stick to one of the more common architecture styles, namely the /Layered/ architecture style, since this fits most interactive systems. In the layered architecture style you divide your system into three parts: User Interface, Application Logic, and Storage.

#+BEGIN_SRC plantuml :file ./images/FLayeredPackage.png
package "User Interface" {
MainWindow o- Dialogue1
}

package "Application Logic" {
package "Domain Logic" {
}

package "Technical Services" {
}
}

package "Storage" {
class DBInterface
}

"User Interface" -[hidden]- "Application Logic"
"Application Logic" -[hidden]- "Storage"
#+END_SRC

#+NAME: fig:LayeredPackageDiagram
#+CAPTION: An example of a Layered Architecture, expressed in an UML Package Diagram
#+RESULTS:
[[file:./images/FLayeredPackage.png]]

   The fact that I tack this on at the end of this sprint introduction may lure you into thinking that you /first/ do your class design and /then/ divide into packages. In fact, you have the overall packages in mind already before you start with the class diagram. To be more precise, you have the "Application Logic" layer in mind. The application logic layer is the layer that mostly contain your class representation of the concepts in your domain model. Since your analysis and your interaction diagrams mostly try to express the behaviour of your system in terms of the interaction between your domain concepts, it is hardly surprising that the class diagram thus derived deals mostly with the application logic needed to represent the problem domain.

   Because the focus right now is to determine what from your domain model is relevant for you to solve in your software application, and how to do it, you are not concerned at the moment with the pure software application aspects of the system. This includes the user interface, technical services (for example a key/value store, rule engines etc.), persistent storage facilities, etc.

   "But", an astute reader may think, "does this not just put us back to square one? We still have all our classes in one big package that won't fit on a single page". Yes it does. And no it doesn't, because you can (and you should) nest packages inside your packages. What you should do is thus to think about the high-level packages you have /inside/ your application logic/domain logic package.
   
#+BEGIN_note
*To Summarise:*
- Right now you will be focusing mostly on the Application Logic Layer
- Start by defining the high-level packages /inside/ the application logic layer
- Then study the dynamic behaviour of your system
- Identify the involved entities (classes), and add these to your class diagram to represent the static structure of your system, along with the methods, attributes, and associations you have identified as necessary.
- Allocate the identified classes to you packages.
- ...
- profit!
#+END_note
** Moar Packages!
   As your system grows, you will get an increasing number of packages, and you will pretty soon need to worry about how you assign responsibilities and classes to different packages. Chapter 35 in {{{larman}}} covers some guidelines for this. Remember that they are /guidelines/ and not set in stone. Glancing through the list there are one or two that I disagree with, and we will discuss this in the appropriate lecture.
* TODO Learning Material
** Book Chapters
   - {{{larman}}}, Chapters:
     11. [@11] Operation Contracts
     13. [@13] Logical Architecture and UML Package Diagrams
     14. [@14] On to Object Design	  
     15. [@15] UML Interaction Diagrams
     16. UML Class Diagrams
     31. [@31] Domain Model Refinement
     35. [@35] Package Design
** TODO Screencasts
 - [[https://play.bth.se/media/Contracts/1_086yu2lr/41750261][Contracts]]
 - [ ] Interaction Diagrams
 - [ ] Class Diagrams
 - [ ] Package Diagrams
** TODO Lectures						   :noexport:
** Further Reading
   - [[http://dilbert.com/strip/1997-03-09e][Dilbert solves the Software Design Problem]]
* Experiential Learning
** Sprint Test Plan
   Go through the user stories for this sprint and make sure you have a clear understanding of how to solve each of them.

   Revisit and update your risks and contingencies section.

   Add and/or revise the following items to your glossary:
   - Interaction Diagrams
     - Sequence Diagrams
     - Collaboration Diagrams (Also: Communication Diagram)
   - Operation Contracts (Also: Design Contracts)
   - Class Diagrams
     - Associations
     - Aggregation
     - Composition
     - Class Roles
     - Multiplicity
   - Dynamic Behaviour
   - Static Structure
   - Package Diagram
   - Software Architecture
   - Architecture Style
     - Layered Architecture Style

   Make sure you understand what each item is, the notation for them, and how to use them either in isolation or together with the other concepts.    
** Assignment: Package Diagram
    List and describe the high-level packages in your system.

    {{{tasks}}}
    - Break down your system into logically coherent packages.
    - Briefly describe each package, and its responsibilities.
    - Model your system in a UML Package Diagram.

#+BEGIN_info
{{{DocStructure}}}

{{{assignment(Package Diagram)}}}
#+INCLUDE: "./DocStruct.org" org

3. [@3] Overall Packages

   List your packages and briefly describe their responsibilities.
4. Package Diagram

   Represent your packages as a UML Package Diagram.
#+END_info

{{{commit}}}

#+BEGIN_tip
{{{condSat}}}

When marking this part of the assignment we are looking for the following:

0. [@0] Does the title page contain a table with authors and author contribution?
1. Size of assignment: Does the package model contain 5 to 10 packages?
2. Do the packages represent a logical division of the system?
3. Is each package described in an understandable way?
4. Are the responsibilities of each package clearly described?
#+END_tip

** Assignment: Interaction Diagrams
    Describe what will happen inside the system for your system events in terms of UML Interaction Diagrams. You may choose yourself whether you prefer UML Sequence Diagrams or UML Collaboration Diagrams. You may wish to try using both to get a feel of which one you prefer.

    {{{tasks}}}
    - Go back to your list of UML Use Cases and their corresponding UML System Sequence Diagrams, and extract the System Events therefrom.
    - Starting with your most important Use Case, create UML Interaction Diagrams for all the System Events.
    - Continue until you have created /no fewer than 10 UML Interaction Diagrams/ and have completed a full Use Case. I.e., if you are in the middle of a use case with your tenth interaction diagram, you complete the use case and create slightly more than ten interaction diagrams.

#+BEGIN_info
{{{docstructure}}}

{{{assignment(Interaction Diagrams)}}}
#+INCLUDE: "./DocStruct.org" org

3. [@3] Prioritised List of Use Cases

   Repeat your prioritised list of Use Cases.

4. System Events

   List the System Events you have extracted from your UML System Sequence Diagrams:

   1. System Events for Use Case <name 1>
   2. System Events for Use Case <name 2>
   3. ...
   4. System Events for Use Case <name N>

5. Interaction Diagrams

   Your UML Interaction Diagrams, organised per use case and titled with the system event.

   1. Interaction Diagrams for Use Case <name 1>
   2. Interaction Diagrams for Use Case <name 2>
   3. ...
   4. Interaction Diagrams for Use Case <name N>
#+END_info

{{{commit}}}

#+BEGIN_tip
{{{condSat}}}

When marking this part of the assignment we are looking for the following:

0. [@0] Does the title page contain a table with authors and author contribution?
1. Size of assignment: Are there at least 10 interaction diagrams?
2. Are all relevant objects (and only objects) involved in the interaction diagrams?
3. Are all methods (messages) suitably named?
4. Are returned objects and objects passed as parameters also represented in the interaction diagram?
5. Will the interaction diagram actually sufficiently address the system event?
6. Are there interactions that are missing to fully satisfy the system event?
#+END_tip
** Assignment: Class and Package Diagram
    In this assignment you use your UML Interaction Diagrams and extract the static structure necessary in the form of a UML Class Diagram. Furthermore, you divide your classes into the packages that you have previously identified. This assignment builds upon the previously created package diagram.

    {{{tasks}}}
    - For each object in each interaction diagram, create a corresponding class in a UML Class Diagram.
    - Put your classes into the package from your Package Diagram you think is most suitable for each class.
    - Add all methods that are being called on each object in your interaction diagram to the corresponding class.
    - If two objects are interacting in your interaction diagrams, add an association between the corresponding classes.
    - Identify attributes that each object must have, and add these to the corresponding class.
    - Refine the associations in your UML Class Diagram and consider whether they should be simple associations, aggregations, or compositions.
    - Refine the associations in your UML Class Diagram with respect to multiplicity
    - Refine the attributes in each class in your UML Class Diagram and add types and visibility.
    - Refine the methods in each class in your UML Class Diagram and add return types, parameter types, and visibility.

#+BEGIN_info
{{{docStructure}}}

{{{assignment(Class and Package Diagram)}}}
#+INCLUDE: "./DocStruct.org" org

3. [@3] Class and Package Diagram
   
   Present the final UML Class Diagram (divided into Packages).

   Briefly describe each package and its responsibilities.
#+END_info

{{{commit}}}

#+BEGIN_tip
{{{condSat}}}

When marking this part of the assignment we are looking for the following:

0. [@0] Does the title page contain a table with authors and author contribution?
1. Size of assignment: Does the UML Class Diagram contain 15-30 Classes?
2. Do all objects from the interaction diagrams in the previous assignment have a corresponding class?
3. Are the classes placed into relevant packages?
4. Do all method calls from the interaction diagrams in the previous assignment have a corresponding method in the right class?
5. Are all interactions in the interaction diagrams accurately represented as associations between classes?
6. Where applicable, are associations between classes modelled as aggregations or compositions?
7. Are there multiplicity indicators on associations? Are they used correctly?
8. Do all methods have a visibility indicator, a return type, types for all parameters, and a relevant name?
9. Do all attributes have a visibility indicator, a type, and a relevant name?
10. Are there any missing attributes?
#+END_tip

** Assignment Submission    

   {{{submit}}}
   
   Your submission shall include the following documents:
   - Interaction Diagrams
   - Class and Package Diagram
** Update Course Backlog
   When deciding how to solve a system event in terms of interacting objects, are there better ways for the objects to interact, and are there worse ways? With respect to what?

   Are there any other questions that you want answered? Add them, along with a brief strategy for how to find an answer.    
* Sprint Acceptance Tests
  You are done with this sprint when:
  - You have an understanding of how the dynamic behaviour of the system is used to identify the static structure
  - You have an understanding of how you may use your previous analysis, in terms of Use Cases, System Sequence Diagrams, and Domain Model to initiate your design of the dynamic behaviour.
  - You have created a Package Diagram document.
  - You have created an Interaction Diagrams document.
  - You have created a Class and Package Diagrams document.
  - You have committed/pushed these documents to your project repository.

  You may also have
  - Updated your Sprint Test Plan
  - Updated your Course Backlog   
