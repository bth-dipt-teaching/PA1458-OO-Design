#+Title: Modelling Behaviour \\\\ =PA14[13]5=
#+Author: Mikael Svahnberg
#+Email: Mikael.Svahnberg@bth.se
#+Date: 2016-04-06
#+EPRESENT_FRAME_LEVEL: 1
#+OPTIONS: email:t <:t todo:t f:t ':t H:2 toc:nil
# #+STARTUP: showall
#+STARTUP: beamer

# #+LATEX_HEADER: \usepackage[a4paper]{geometry}
#+LATEX_CLASS_OPTIONS: [10pt,t,a4paper]
# #+LATEX_CLASS: beamer
#+BEAMER_THEME: BTH_msv

* Outline							   :noexport:
      Upload:
      - Structuring Use Cases (From Modelling Behaviour Lecture)
      - Sequence Diagram
	- Actor
	- Lifeline
	- Event
      - Contract
	- Name
	- Responsibilities
	- Preconditions
	- Postconditions
      - Extended Contract
	- Name
	- Responsibilities
	- Type
	- Cross-References
	- Notes
	- Exceptions
	- Output
	- Preconditions
	- Postconditions
      - State Diagrams
	- State / Event / Transition
	- Notation
	  - Nested States
	  - Activity in a State
	  - Actions on Transitions

      Classroom:
      - Going from Use Case to Sequence Diagram
      - System Sequence Diagram vs regular Sequence Diagram
      - System as a modelling concept
      - Contracts
	- What are they?
	- How should you interpret preconditions?
	- How to interpret postconditions?
	- Stage-and-Curtain execution
      - Discuss:
	- What are extended contracts good for?
      - State Diagrams
	- Examples + Discussion: Common Pitfalls
	- What types of Events can there be in a state diagram?
      - Discuss:
	- How do we fit state diagrams into the UML process?
* Upload							   :noexport:
** DONE Structuring Use Cases
   CLOSED: [2016-03-31 Thu 09:20]
# StarUML/Emacs
** DONE Contract / Extended Contract
   CLOSED: [2016-03-31 Thu 09:45]
# Emacs
** DONE Sequence Diagrams
   CLOSED: [2016-03-31 Thu 08:57]
*** Notes
- lifeline
-actor
-System
-message/event
-system operation
- clarifying texts

ex:
- startSale()
- enterItem(upc,quantity)
- endSale()
- makePayment(amount)

concrete instantiation example
*** System Sequence Diagram					     :dryrun:
#+BEGIN_SRC plantuml :file FSystemSequenceDiagramExample.png
hide footbox
title PoS Example
actor ":Cashier" as cashier
participant ":System" as system

cashier -> system : startSale()
note left: This starts a new sale
system --> cashier : ok
loop
cashier -> system : enterItem(upc,quantity)
end
cashier -> system : endSale()
cashier -> system : makePayment(amount)
#+END_SRC

#+RESULTS:
[[file:FSystemSequenceDiagramExample.png]]

*** System Sequence Diagram					       :live:
#+BEGIN_SRC plantuml :file FSystemSequenceDiagramExample.png
hide footbox
title PoS Example

actor ":Cashier" as cashier
participant ":System" as system

cashier -> system : startSale()
system --> cashier : ok
loop no more items
cashier -> system : enterItem(upc, quantity)
system --> cashier : running total
end
cashier -> system : endSale()
system --> cashier : final tally
cashier -> system : makePayment(amount)
#+END_SRC

#+RESULTS:
[[file:FSystemSequenceDiagramExample.png]]

** DONE State Diagrams
   CLOSED: [2016-04-06 Wed 10:16]
# StarUML
*** State Diagrams						     :dryrun:
 - State
 - Transition
 - Transition Action
 - Transition Condition
 - Nested States
 - entry/do/exit actions
#+BEGIN_SRC plantuml :file FStateDiagramExample0.png
left to right direction
title State Diagram Example
state aState
[*] --> aState
aState --> anotherState : event [guard condition]/eatIcecream()
aState : entry/callMom()
aState : exit/callDad()

anotherState --> [*] : done

aState --> aState : redo
#+END_SRC

#+RESULTS:
[[file:FStateDiagramExample0.png]]

#+BEGIN_SRC plantuml :file FStateDiagramExampe1.png
[*] --> Hunting : Game Starts
Hunting : entry/setColour(blue)
Hunting : do/locatePacman()
Hunting : do/move(myStrategy)
Hunting --> Eating : Found Pacman / playSound(lostLife)
Eating --> Hunting
Eating : do/cycleColours(rainbow)
Hunting --> Running : Pacman eats Candy / playSound(powerup)
Running: entry/setColour(red)
Running: do/locatePacman()
Running: do/move(myEscapeStrategy)
Running --> Hunting : timeout /cycleColours(rainbow)
Running --> Eaten : Pacman finds ghost / playSound(scoreup)

Eating --> [*] : Game over

Eaten --> Respawn
Respawn : entry/setPosition(pen)
Respawn : do/cycleColours(rainbow)
Respawn --> Hunting : timeout
#+END_SRC

#+RESULTS:
[[file:FStateDiagramExampe1.png]]

*** State Diagrams

#+BEGIN_SRC  plantuml :file FStateDiagramExample2.png
left to right direction
title State Diagram Example

state aState
[*] --> aState
aState --> anotherState : event [time > 2min] / eatIceCream()
aState --> aThirdState : someOtherEvent
anotherState --> aState

aState : entry/callMom()
aState : exit/callDad()
aState : do/doSomething()

aState --> aState : droppedIceCream

aState --> [*]

#+END_SRC
#+RESULTS:
[[file:FStateDiagramExample2.png]]

#+BEGIN_SRC  plantuml :file FStateDiagramExample3.png
@startuml
title Pacman Ghosts
[*] --> Hunting : Game Starts
Hunting : entry/setColor(blue)
Hunting : do/locatePacman()
Hunting : do/move(myStrategy)

Hunting --> Eating : Found Pacman / playSound(lostLife)
Eating --> Hunting
Eating : do/cycleColours(rainbow)

Hunting --> Running : Pacman eats Candy / playSound(powerUp)
Running : entry/setColour(red)
Running : do/locatePacman()
Running : do/move(myEscapeStrategy)

Running --> Hunting : timeout / cycleColours(rainbow)

Running --> Eaten : Pacman finds ghost / playSound(scoreUp)

Eating --> [*] : no more lives

Eaten --> Respawn

Respawn : entry/setPosition(pen)
Respawn : do/cycleColours(rainbow)
Respawn --> Hunting : timeout(2sec)
@enduml
#+END_SRC
#+RESULTS:
[[file:FStateDiagramExample3.png]]
* Structuring Use Cases						   :noexport:
** Structuring Use Cases
** Reusable sub-processes
#+BEGIN_SRC plantuml :file FStructuringUC0.png
left to right direction
rectangle PoS {
(BuyItem)
(Pay by Cash)
(Pay by Card)
(Pay by Credit)
#+END_SRC

#+ATTR_LATEX: :width 6cm
#+RESULTS:
[[file:FStructuringUC0.png]]
** Example: \\ PoS main Use Case
:PROPERTIES: 
:BEAMER_OPT: shrink=25
:END:
#+ATTR_LATEX: :align p{7cm}p{7cm}
| Actor Action                                                                         | System Response                                                                                                               |
|--------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------|
| 1. Customer arrives at a checkout with items to purchase                             |                                                                                                                               |
| 2. Cashier records identifier from each item                                         | 3. Determines item price and adds item info to running sale transaction. Description and price of current item are presented. |
| 4. On completion of item entry, Cashier indicates to PoS that item entry is complete | 5. Calculates and presents the sale total.                                                                                    |
| 6. Cashier tells Customer the total.                                                 |                                                                                                                               |
| 7. Customer gives cash to Cashier.                                                   |                                                                                                                               |
| 8. Cashier records received cash                                                     | 9. Shows the balance due to the Customer                                                                                      |
|                                                                                      | 10. Prints receipt                                                                                                            |
| 11. Cashier deposits the cash and extracts the balance.                              |                                                                                                                               |
|                                                                                      | 12. Logs the complete sale                                                                                                    |
|                                                                                      |                                                                                                                               |
| 13. C gives printed receipt to B with balance                                        |                                                                                                                               |
| 14. B leaves with the items and recept.                                              |                                                                                                                               |
|--------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------|
** Example: \\ PoS re-structured use case I
:PROPERTIES: 
:BEAMER_OPT: shrink=25
:END:
#+ATTR_LATEX: :align p{7cm}p{7cm}
| Actor Action                                                                         | System Response                                                                                                               |
|--------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------|
| 1. Customer arrives at a checkout with items to purchase                             |                                                                                                                               |
| 2. Cashier records identifier from each item                                         | 3. Determines item price and adds item info to running sale transaction. Description and price of current item are presented. |
| 4. On completion of item entry, Cashier indicates to PoS that item entry is complete | 5. Calculates and presents the sale total.                                                                                    |
| 6. Cashier tells Customer the total.                                                 |                                                                                                                               |
| 7. Customer chooses payment type.                                                    |                                                                                                                               |
| a. if Cash payment -- initiate Pay by Cash                                           |                                                                                                                               |
| b. if Credit payment -- initiate Pay by Credit                                       |                                                                                                                               |
| c. if Check payment -- initiate Pay by Check                                         | 8. Logs the sale                                                                                                              |
|                                                                                      | 9. Prints receipt                                                                                                             |
|                                                                                      |                                                                                                                               |
| 10. C gives printed receipt to B with balance                                        |                                                                                                                               |
| 11. B leaves with the items and recept.                                              |                                                                                                                               |
|--------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------|
** Example: \\ PoS re-structured use case II
:PROPERTIES: 
:BEAMER_OPT: shrink=25
:END:
#+ATTR_LATEX: :align p{7cm}p{7cm}
| Actor Action                                                                         | System Response                                                                                                               |
|--------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------|
| 1. Customer arrives at a checkout with items to purchase                             |                                                                                                                               |
| 2. Cashier records identifier from each item                                         | 3. Determines item price and adds item info to running sale transaction. Description and price of current item are presented. |
| 4. On completion of item entry, Cashier indicates to PoS that item entry is complete | 5. Calculates and presents the sale total.                                                                                    |
| 6. Cashier tells Customer the total.                                                 |                                                                                                                               |
| 7. Customer pays and the system handles payment.                                     | 8. Logs the sale                                                                                                              |
|                                                                                      | 9. Prints receipt                                                                                                                              |
| 10. C gives printed receipt to B with balance                                        |                                                                                                                               |
| 11. B leaves with the items and recept.                                              |                                                                                                                               |
|                                                                                      |                                                                                                                               |
| ...                                                                                  |                                                                                                                               |
| Options                                                                              |                                                                                                                               |
| 7.a. if Cash payment initiate _CashPayment_                                          |                                                                                                                               |
| 7.b. if Credit payment initiate _CreditPayment_                                      |                                                                                                                               |
| 7.c. if Check payment initiate _CheckPayment_                                        |                                                                                                                               |
|--------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------|
** Example: \\ sub use case
:PROPERTIES: 
:BEAMER_OPT: shrink=25
:END:
#+ATTR_LATEX: :align p{7cm}p{7cm}
   | _CashPayment_                                |                                          |
   | Actor Action                                 | System Response                          |
   |----------------------------------------------+------------------------------------------|
   | 1. Customer chooses to pay by cash           |                                          |
   | 2. Customer gives cash to cashier            |                                          |
   | 3. Cashier records received cash             | 4. Shows the balance due to the customer |
   | 5. Cashier deposits cash,                    |                                          |
   | and extracts the balance due to the Customer |                                          |
   | 6. Cashier gives the balance to the Customer |                                          |
** Example: \\ structured use case diagram
#+BEGIN_SRC plantuml :file FStructuringUC1.png
left to right direction

rectangle POS {
(BuyItems)
(CreditPayment)
(CashPayment)
(CheckPayment)
(CreditPayment) .> (BuyItems) : include
(CashPayment) .> (BuyItems) : include
(CheckPayment) .> (BuyItems) : include

}

Cashier -> (BuyItems)
Customer -> (BuyItems)

:Credit Authorisation Service: as CAS

CAS -> (CreditPayment)
#+END_SRC

#+ATTR_LATEX: :height 6cm
#+RESULTS:
[[file:FStructuringUC1.png]]
** Include vs Extends
   - Include: as in example, include sub-process in use case.
   - Extends: Keep the original use case stable, introduce a new behaviour
     - cf. /Aspect Oriented Programming/
#+BEGIN_SRC plantuml :file FUseCaseExtends.png
left to right direction
rectangle POS {
(GiftCertificate) .> (BuyItems) : extend
}
:Cashier: -> (BuyItems)
:Customer: -> (BuyItems)
#+END_SRC

#+ATTR_LATEX: :height 4cm
#+RESULTS:
[[file:FUseCaseExtends.png]]

* Contracts							   :noexport:
** Contracts
** Summary
   - Black Box Description
     - Use Cases
     - System Sequence Diagrams
   - White Box (first steps)
     - Contracts
#+ATTR_LATEX: :height 4cm
[[./FSystemSequenceDiagramExample.png]]
** Stage-and-Curtain model

   - Visible: Current state

     /close curtains/

     <things happen>

     /open curtains/

   - Visible: new state

     The changes between current and new state are described in a /Contract/
** State / System State
   - Concepts (Instances of)
   - Attributes (Values of)
   - Associations (Links between instances)
** Basic Contract Format
   - Name
   - Responsibles
   - Pre-conditions
   - Post-conditions
** Example
   - Name: /EnterItem(barcode, quantity)/
   - Responsibilities: /Record sale of an item and add it to the sale. Display item description and price./
   - Preconditions: /Sale is started/
   - Postconditions:
     - _:SalesItem_ corresponding to product barcode was created.
     - _:SalesItem_ was associated with the current _:Sale_
     - _:SalesItem.quantity_ was set to /quantity/

#+BEGIN_SRC plantuml :file FContractExample.png
object PoS
object "si:SalesItem" as si
object "current:Sale" as sale

PoS -> si : creates
sale o-- si
si : quantity=5
si : productID=barcode
#+END_SRC

#+ATTR_LATEX: :height 3.5cm
#+RESULTS:
[[file:FContractExample.png]]
** Preconditions
   - Assumptions of the state of the system before operation begins
   - Not tested in the operation
     - Ensured by the caller (!) [fn:1]

[fn:1] Defensive Programming says the exact opposite: if it is a precondition, then ~assert~ them so that you can fail early.
** Postconditions
   Nature of postconditions:
   - Declarative statements
   - Not ordered
   - Not actions performed: only state changes

   Postcondition categories:     
   - create or delete an instance
   - modification of an attribute
   - create or delete an association
** Extended Contract Format
   - Name: /EnterItem(barcode, quantity)/
   - Responsibilities: /Record sale of an item and add it to the sale. Display item description and price./
   - Type: /System/
   - Cross-References: /Use case Buy Items, Requirements X, Y, Z/
   - Notes: /Monitor speed of database query/
   - Exceptions: /If barcode is invalid then indicate error/
   - Output: /None/
   - Preconditions: /Sale is started/
   - Postconditions:
     - _:SalesItem_ corresponding to product barcode was created.
     - _:SalesItem_ was associated with the current _:Sale_
     - _:SalesItem.quantity_ was set to /quantity/

* Classroom
** Example: \\ From Use Case to Sequence Diagram 		    :Example:
:PROPERTIES: 
:BEAMER_OPT: shrink=25
:END:
#+ATTR_LATEX: :align p{7cm}p{7cm}
| Actor Action                                                                         | System Response                                                                                                               |
|--------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------|
| 1. Customer arrives at a checkout with items to purchase                             |                                                                                                                               |
| 2. Cashier records identifier from each item                                         | 3. Determines item price and adds item info to running sale transaction. Description and price of current item are presented. |
| 4. On completion of item entry, Cashier indicates to PoS that item entry is complete | 5. Calculates and presents the sale total.                                                                                    |
| 6. Cashier tells Customer the total.                                                 |                                                                                                                               |
| 7. Customer gives cash to Cashier.                                                   |                                                                                                                               |
| 8. Cashier records received cash                                                     | 9. Shows the balance due to the Customer                                                                                      |
|                                                                                      | 10. Prints receipt                                                                                                            |
| 11. Cashier deposits the cash and extracts the balance.                              |                                                                                                                               |
|                                                                                      | 12. Logs the complete sale                                                                                                    |
|                                                                                      |                                                                                                                               |
| 13. C gives printed receipt to B with balance                                        |                                                                                                                               |
| 14. B leaves with the items and recept.                                              |                                                                                                                               |
|--------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------|
** More on Sequence Diagrams
#+BEGIN_SRC plantuml :file FSequenceDiagrams.png
hide footbox
title Example Sequence Diagram

participant ":PoS"  as pos

[-> pos : startNewSale()
activate pos
create participant "current:Sale" as cs
pos --> cs : create()
deactivate pos

[-> pos : enterItem(upc, qty)
activate pos
create participant "si:SalesItem" as si
pos --> si : create()
pos -> si : setProductID(upc)
activate si
deactivate si
pos -> si : setQuantity(qty)
activate si
deactivate si
pos -> cs : addItem(si)
activate cs
create participant "info:Warehouse" as info
cs --> info : create()
cs -> info : theDescription=getDescription(si->getUPC())
activate info
deactivate info
cs -> info : thePrice=getPrice(si->getUPC())
activate info
deactivate info
cs -> si : setPrice(thePrice)
activate si
deactivate si
cs -> cs : increaseTotal(thePrice)
activate cs
deactivate cs
cs -> info : destroy()
destroy info
cs --> pos : theItemDescription
deactivate cs
deactivate pos
#+END_SRC

#+LATEX: \vspace{-1cm}\hspace{2cm}
#+ATTR_LATEX: :height 8cm
#+RESULTS:
[[file:FSequenceDiagrams.png]]

** Communication Diagrams \\ (Interaction Diagrams)
#+BEGIN_SRC plantuml :file FCommunicationDiagram.png
left to right direction
title enterItem(upc,qty)

object ":PoS"  as pos
object "si:SalesItem" as si
object "current:Sale" as cs
object "info:Warehouse" as info

pos --> si : 1. Create()\n2. setProductID(upc)\n3. setQuantity(qty)
pos --> cs : 4. addItem(si)
cs --> info : 5. Create()\n6. theDescription=getDescription(si->getUPC())\n7. thePrice=getPrice(si->getUPC())\n10. destroy()
cs --> si : 8. setPrice(thePrice)
cs --> cs : 9. increaseTotal(thePrice)
#+END_SRC

#+ATTR_LATEX: :width 10cm
#+RESULTS:
[[file:FCommunicationDiagram.png]]

** Discuss: Contracts						 :Discussion:
- What are contracts?
  - Why are we writing them?
- How should you interpret preconditions?
- How to interpret postconditions?
- What are their relation to Sequence Diagrams, Class Diagrams?
- What are extended contracts good for?
  - When might you need Extended Contracts?
** State Diagrams						    :Example:
#+BEGIN_SRC plantuml :file FStateDiagramExamplePhone.png
left to right direction
title Phone Call
[*] -> Idle
Idle --> Active : off hook /play dial tone
Active --> Idle : on hook
#+END_SRC

#+ATTR_LATEX: :height=6cm
#+RESULTS:
[[file:FStateDiagramExample4.png]]

** Nested States						    :Example:
#+BEGIN_SRC plantuml :file FStateDiagramExamplePhoneNested.png
left to right direction
title Phone Call
[*] -> Idle
Idle --> Active : off hook /play dial tone
Active --> Idle : on hook

state Active {
[*] -> PlayingDialTone
PlayingDialTone --> Dialing : digit entered
Dialing --> Connecting : number complete
Dialing --> Dialing : digit entered
Connecting -> Talking : connected
}
#+END_SRC

#+ATTR_LATEX: :height=6cm
#+RESULTS:
[[file:FStateDiagramExamplePhoneNested.png]]

** Discuss: State Diagrams					 :Discussion:
   - What is a State?
     - When is it meaningful to model states?
   - What is an Action and what is a State Change?
     - Also discuss this for Contracts
   - How can we use state diagrams in the context of UML to avoid extra work?
** Example State Diagram (bad) 				 :Example:Discussion:
#+ATTR_LATEX: :width 11cm
[[./IExampleBadStateChart.png]]
** Example State Diagram (better) 			 :Example:Discussion:
#+BEGIN_SRC plantuml :file FExampleBadStateChart_fixed.png
left to right direction
[*] --> Playing : Everything Loaded
Playing --> LostLife : Fall Down
Playing --> LostLife : Meet Ghost [powerup inactive]
Playing --> Playing : Hit candy / addScore()

LostLife : do/PlayLostLifeAnimation()

LostLife --> Playing : [more lives]
LostLife --> [*] : [no more lives]

Playing --> Playing : Meet Ghost [powerup active] /addScore()

#+END_SRC

#+ATTR_LATEX: :width 11cm
#+RESULTS:
[[file:FExampleBadStateChart_fixed.png]]
** Discussion: Dynamic Behaviour				 :Discussion:
   - Why should we model the behaviour?
