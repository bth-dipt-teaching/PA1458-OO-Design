#+Title: Software Design
#+Subtitle: Introduction
#+Author: Mikael Svahnberg
#+Email: Mikael.Svahnberg@bth.se
#+EPRESENT_FRAME_LEVEL: 1
#+OPTIONS: email:t <:t todo:t f:t ':t H:1 toc:nil
# #+STARTUP: showall
#+STARTUP: beamer

#+LATEX_CLASS_OPTIONS: [10pt,t,a4paper]
#+BEAMER_THEME: BTH_msv

* Outline                                                          :noexport:
      - [X] Course Intro
	- About MSV
	- Course Structure
	- Lecture Structure
	- Literature
	- Tools
      - [X] Modelling why care
	- Gorschek paper
	- Sell it anyway
      - [X] Overall OOD Development Methodology
	- Reason: Traceability
	- Reason for all the models: Analysis triangulation
      - [ ] Modelling at large
      - [X] OO Analysis
      - [X] OO Design
      - [ ] UML
	- Sell UML (Abstract, Precise, Pictoral)
	- UML as a collection of models
	- UML as a methodology
	- UML wankery
      - [X] Design / Design Patterns
      - [X] Exercise in Scale??
* About Me: Mikael Svahnberg
#+ATTR_LATEX: :width 1.5cm
  [[~/Documents/Personal/avartar.png]]
- Associate Professor, PhD in Software Engineering
- mailto:Mikael.Svahnberg@bth.se
- https://sites.google.com/site/mikaelsvahnberg/
- Interests:
  - Software Architectures, Software Architecture Evaluation, Software Architecture Evolution, Requirements Engineering, Large Scale Requirements Engineering, Market-Driven Requirements Engineering, Software Product Lines, Software Reuse, Empirical Research Methodology, Software Engineering Decision Support, Static Code Analysis, Software Architecture Reconstruction
# * Discuss: Course Charter: PA1458                                :Discussion:
# Efter genomförd kurs skall studenten:
# - på en grundläggande nivå i grupp kunna ta fram krav på en programvara och uttrycka dem i en kravspecifikation
# - i grupp producera en översiktlig utvecklingsprojektplan baserat på en kravspecifikation
# - i grupp kunna skapa en detaljerad objektorienterad design för ett mjukvaruprogram
# - i grupp kunna implementera ett mjukvaruprogram inom rimlig tid, baserat på en kravspecifikation och en objektorienterad design
# - på en grundläggande nivå i grupp kunna planera och genomföra testning av producerad programvara, baserat på en kravspecifikation
# - skapa och analysera objektorienterade artefakter uttryckta i UML
# - kunna motivera och använda designmönster i utvecklingen av mjukvarusystem   
# * Discuss: Course Charter: PA1459                                :Discussion:
# :PROPERTIES: 
# :BEAMER_OPT: shrink=15
# :END:

# *Kunskap och förståelse* Efter genomförd kurs ska studenten:
# - kunna visa förståelse för grundläggande principer i objektorienterad programvaruutveckling.
# - kunna visa förståelse för UML som modelleringsspråk.
# - kunna visa kunskap om grundläggande designprinciper.
# - kunna visa kunskap om grundläggande designmönster.

# *Färdigheter och förmåga* Efter genomförd kurs ska studenten:
# - kunna uttrycka strukturen och beteendet hos ett system i termer av objektorienterade koncept.
# - kunna korrekt använda UML för att uttrycka struktur och beteende hos ett system.
# - kunna korrekt transformera en objektorienterad design till källkod.
# - kunna tillämpa designprinciper och designmönster i allmänhet och inom en särskild domän.

# *Värderingsförmåga och förhållningssätt* Efter genomförd kurs ska studenten:
# - kunna analysera källkod för eventuella förbättringar.
# - kunna analysera och kritiskt diskutera en design för eventuella förbättringar.
# * Discuss: Course Charter: PA1460                                :Discussion:
# :PROPERTIES: 
# :BEAMER_OPT: shrink=15
# :END:

# *Kunskap och förståelse* Efter genomförd kurs ska studenten:
# - kunna visa förståelse för grundläggande principer i objektorienterad programvaruutveckling.
# - kunna visa kunskap om grundläggande designprinciper.
# - kunna visa kunskap om grundläggande designmönster.
# - kunna visa kunskap om grundläggande mjukvaruarkitekturstilar

# *Färdigheter och förmåga* Efter genomförd kurs ska studenten:
# - kunna uttrycka strukturen och beteendet hos ett system i termer av objektorienterade koncept.
# - kunna tillämpa grundläggande designmönster i en objektorienterad design.
# - kunna skapa en objektorienterad design för ett system enligt goda objektorienterade designprinciper
# - kunna tillämpa grundläggande arkitekturstilar för ett mjukvarusystem
# - kunna resonera om de kvalitetsegenskaper ett system med en viss arkitekturstil har eller bör ha
# - kunna resonera om och skapa en grundläggande testplan för ett objektorienterat system

# *Värderingsförmåga och förhållningssätt* Efter genomförd kurs ska studenten:
# - kunna analysera och kritiskt diskutera en design för eventuella förbättringar.
* Course Structure
  - Modules
    - Readings
    - Lectures
      - Video Lectures
      - Classroom Lectures
    - Things to do
  - Assignments
* Literature
:PROPERTIES: 
:BEAMER_OPT: shrink=15
:END:

#+ATTR_LATEX: :width 1.5cm
[[./ILarman.jpg]]
- C. Larman, /Applying UML and Patterns/, Prentice Hall, 3rd Edition
- Also available as a softcover edition from 2015

#+LATEX: \only<2>{
#+ATTR_LATEX: :height 1.5cm
[[./IGamma.jpg]]
- Gamma, Helm, Johnson, Vlissides, /Design Patterns, Elements of Reusable Object-Oriented Software/, Addison-Wesley Professional
#+LATEX: }
** Sidenote							   :noexport:
   The Gamma et al. book is often referred to as the "Gang of Four-book". This is, in fact, a reference to the Chinese cultural revolution (https://en.wikipedia.org/wiki/Gang_of_Four), and refers to four people who were later charged with treason. When talking to industry practitioners, the GoF-book is often held in the same regard. Stockholm-syndromed as I am into academia, I find this a bit unfair, but the book does become a problem when you use it indiscriminately in an attempt to design pattern /everything/.
* Assignments
- Submit your work in groups of 3-5 students.
- Deadlines on Canvas
- One special case: /Discussion of GRASP Patterns/
  - Has no points, just a submission
  - The intention is to make you /think/
  - The quality of your answers will become visible in the next assignment (/Interaction Diagrams/)

Resubmissions:
- Within two weeks after course ends.
- Same dates as the re-exams
* Tools
  Any UML Tool will work, except pen and paper.

  - http://staruml.io/
  - https://www.visual-paradigm.com/
  - http://www.eclipse.org/papyrus/
  - http://argouml.tigris.org/
  - https://marketplace.eclipse.org/content/uml-designer
  - http://plantuml.com/
  - ...
* Discuss: Why Bother About Modelling                            :Discussion:
  T. Gorschek, E. Tempero, L. Angelis, /On the use of software design models in software development practice: An empirical investigation/, in Journal of Systems and Software 95(2014):176--193.

  - TL;DR: Nearly 4000 industry practitioners were asked "Do you model?". Answers ranged from "no" to "hell no!".
#+LATEX: \only<2>{
  - ... *There is, of course, more to this story.*
#+LATEX: } \vspace{0.25cm}
#+ATTR_LATEX: :width 9cm
  [[./ISurveyModelling.png]]
* Why Bother About Modelling
  - In the freetext answers a different story emerges:
    - They do use sketches, informal models, casual diagrams, etc, but not formal UML.
  - Common explanations:
    - "Only for very complex designs, sometimes"
    - "Only use initially then start coding (diagrams not kept/updated)"
    - "Enables visualisation of the big picture/high level"
    - "Other types of models but not UML"
    - "Use models to communicate and coordinate with other developers"
  - \sum Models are not used as researchers expect. Instead they are used for *conceptual analysis and exploration, problem solving, visualisation, and communication.*
* So, why bother?
  - conceptual analysis and exploration
  - problem solving
  - visualisation
  - communication

Also:
- This course trains you in a particular mindset, where you begin to analyse a problem in terms of its /objects/ and their /interactions/.
  - This problem solving mindset is difficult to reach when bogged down with all the implementation details.
- This is the only place where you are expected to use an all-out thermonuclear UML approach to analysis and design.
  - Later on, you will cherry-pick models in order to understand/visualise/communicate a particular problem area better.
- Bear in mind that you throw out a few good things with the bath water too.
* Development Phases
  - Requirements
    - Problem formulation
    - Quality constraints of the system
    - Planning and estimations
  - Analysis / Domain Analysis
    - Real World abstractions, mechanisms, relationships
  - Design
    - Convert domain analysis into a technical solution
    - design patterns etc.
  - Implementation
    - "Execution" of the design
  - Testing
  - Maintenance
* Object Oriented Analysis and Design
  - Object Orientation
    - Objects
    - Attributes
    - Relationships
    - Collaborations
    - Responsibilities
  - OO Analysis
    - Problem domain and requirements
    - /Objects/ in the problem domain
  - OO Design
    - Logical Software Objects (with attributes and methods, plus collaborations)
  - OO Construction/Implementation
* OO Modelling
  - A traceable chain from requirements to code/test.
    - Each model is transformed to a [more detailed] model that is closer to the end-product.
    - Do this fully, and you have /Model-Driven Development/
    - The overall idea is that
      - models are cheaper than code.
      - models are abstractions of code.
      - models are more rigorous than code :barf.png:
    - UML is /one/ set of models.
    - RUP is the process used to transform the system through the UML graphs from requirements to code.
* RUP/UML
- Rational Unified Process
- Unified Modelling Language

Process:
1. Use Case Diagrams / Use Cases
2. Conceptual Models / Domain Models
3. System Sequence Diagram 
4. Class Diagrams
5. Sequence Diagrams / Interaction Diagrams
6. Goto (4)
* Design Patterns
  - Design patterns are reusable solutions to known problems
    - With known consequences
  - There is nothing that /requires/ you to use design patterns; they are a convenience.
  - Design patterns focus primarily on structure (class view), and interaction (sequence diagrams).
    - Thus, we will come back to them later in the course.
* Excercise                                                         :Example:
** Discussion Forum
   Design a Conceptual Model of a Discussion forum with categories, topics, posts, users, user profiles, and private messages.
   The system consists of a server park (including the database), a web client, and an android client.
