#+Title: Software Design Courses
#+INCLUDE: "../Site/org/header.org-in" org



* Sprint Structure						   :noexport:
** About This Sprint
** User Stories covered in this Sprint
** Introduction
** Learning Material
*** Book Chapters
*** Screencasts
*** Lectures
*** Articles
*** Further Reading
** Experiential Learning
*** Sprint Test Plan
    Go through the user stories for this sprint and make sure you have a clear understanding of how to solve each of them.

    Revisit and update your risks and contingencies section.

    Add and/or revise the following items to your glossary:
    - 

    Make sure you understand what each item is, the notation for them, and how to use them either in isolation or together with the other concepts.    
*** Assignment Submission
*** Update Course Backlog

    Are there any other questions that you want answered? Add them, along with a brief strategy for how to find an answer.    
** Sprint Acceptance Tests
   You are done with this sprint when:

   You may also have
   - Updated your Sprint Test Plan
   - Updated your Course Backlog   
* Sprint Map							   :noexport:

 old
 :NOTES:
 | Topic                    | Sprint                                 | Delivery     | PA1415 | PA1435 | PA1443 |
 |                          |                                        |              | 7.5 hp | 6 hp   | 5 hp   |
 |--------------------------+----------------------------------------+--------------+--------+--------+--------|
 | Course Intro             | Sprint 0: Course Introduction          |              | Yes    | Yes    | Yes    |
 | Software Development     | Development Methodologies              |              | Yes    |        |        |
 |                          | Requirements Engineering               |              | Yes    |        |        |
 | Object Oriented Analysis | Use Cases and Use Case Diagrams        | Submission 1 | Yes    | Yes    | Yes    |
 |                          | Concepts and Events                    |              | Yes    | Yes    | Yes    |
 |                          | State Diagram                          |              | Yes    |        |        |
 | Quality Assurance        | Testing                                |              | Yes    | Yes    |        |
 | Object Oriented Design   | Good Interactions                      |              | Yes    | Yes    | Yes    |
 |                          | Interactions and Structure             | Submission 2 | Yes    | Yes    | Yes    |
 |                          | Design Patterns                        |              | Yes    | Yes    | Yes    |
 | Software Architecture    | Introduction to Software Architectures |              |        |        | Yes    |
 |                          | Software Architecture Patterns         |              | Yes    | Yes    | Yes    |
 | From Design to Code      | Designing the User Interface           |              | Yes    |        |        |
 |                          | Implementation                         | Submission 3 | Yes    | Yes    |        |
 | Course Wrap-up           | Preparing for Exam                     |              | Yes    | Yes    | Yes    |
 |                          | Sprint 99: Finalising the Course       |              | Yes    | Yes    | Yes    |
 |--------------------------+----------------------------------------+--------------+--------+--------+--------|
 :END:


 Connection between Lectures and Sprints, and which courses should follow what lectures/Sprints
 | Offset week | Week | Lecture                        | Seminar                       | Sprint                                          | PA1415 | PA1434 | PA1435 | PA1443 |                                            |
 |             |      |                                |                               |                                                 | 7.5 hp | 4 hp   | 6 hp   | 5 hp   |                                            |
 |-------------+------+--------------------------------+-------------------------------+-------------------------------------------------+--------+--------+--------+--------+--------------------------------------------|
 |           1 |   13 | Introduction                   |                               | Course Introduction                             | X      | X      | X      |        |                                            |
 |           1 |   13 | Development Process            |                               | Development Methodologies                       | X      |        |        |        |                                            |
 |           2 |   14 | Requirements Engineering       |                               | Requirements Engineering                        | X      |        |        |        |                                            |
 |       mid 2 |   14 | Introduction (rep)             |                               | Course Introduction                             |        |        |        | X      |                                            |
 |      late 2 |   14 | User Stories and UML Use Cases |                               | Use Cases and Use Case Diagrams                 | X      | X      | X      | X      | x2                                         |
 |      late 2 |   14 |                                | Req, Use Case, Planning       |                                                 | S      | S      | S      | S      |                                            |
 |-------------+------+--------------------------------+-------------------------------+-------------------------------------------------+--------+--------+--------+--------+--------------------------------------------|
 |       mid 3 |   15 |                                |                               | Release Sprints A1v1 (Req & UC)                 | A1v1   |        |        |        |                                            |
 |       mid 3 |   15 |                                |                               | A1v2 (UC)                                       |        | A1v2   | A1v2   |        |                                            |
 |     early 5 |   17 |                                |                               | A1v2 (UC)                                       |        |        |        | A1v2   |                                            |
 |-------------+------+--------------------------------+-------------------------------+-------------------------------------------------+--------+--------+--------+--------+--------------------------------------------|
 |           3 |   15 | Structure                      |                               | Concepts and Events                             | X      | X      | X      | X      | x2                                         |
 |           3 |   15 | Testing                        |                               | Testing                                         | X      |        |        | X      |                                            |
 |     early 4 |   16 |                                | Discuss A1                    |                                                 | AS     | AS     | AS     |        |                                            |
 |           4 |   16 | Behaviour                      |                               | State Diagram                                   | X      |        |        |        | x2                                         |
 |           " |    " | "                              |                               | Good Interactions                               | X      | X      | X      | X      | "                                          |
 |           " |    " | "                              |                               | Interactions and Structure                      | X      | X      | X      | X      | "                                          |
 |           4 |   16 | Design Patterns                |                               | Design Patterns                                 | X      | X      | X      | X      | x2                                         |
 |           5 |   17 |                                | Structure and Design Patterns |                                                 | S      | S      | S      | S      |                                            |
 |      late 5 |   17 |                                | Discuss A1                    |                                                 |        |        |        | AS     |                                            |
 |-------------+------+--------------------------------+-------------------------------+-------------------------------------------------+--------+--------+--------+--------+--------------------------------------------|
 |           6 |   18 |                                |                               | Release Sprints A2v1 (OODesign)                 | A2v1   | A2v1   | A2v1   |        |                                            |
 |           7 |   19 |                                |                               |                                                 |        |        |        | A2v1   |                                            |
 |-------------+------+--------------------------------+-------------------------------+-------------------------------------------------+--------+--------+--------+--------+--------------------------------------------|
 |           5 |   17 | Software Architectures         |                               | Introduction to Software Architectures          |        |        |        | X      |                                            |
 |           " |    " | "                              |                               | Software Architecture Patterns                  |        |        |        | X      |                                            |
 |           5 |   17 | Quality Attributes             |                               | Introduction to Software Architectures          |        |        |        | X      |                                            |
 |           5 |   17 | From Design to Code            |                               | Implementation and Designing the User Interface | X      | X      | X      | X      | x2                                         |
 |           6 |   18 |                                | Software Architectures        |                                                 |        |        |        | S      |                                            |
 |           6 |   18 |                                | Open Discussion               |                                                 | S      | S      | S      | S      |                                            |
 |           7 |   19 |                                | Discuss A2                    |                                                 | AS     | AS     | AS     | AS     |                                            |
 |-------------+------+--------------------------------+-------------------------------+-------------------------------------------------+--------+--------+--------+--------+--------------------------------------------|
 |           8 |   20 |                                |                               | Release Sprint A3v1 (Testing, Implementation)   | A3v1   |        | A3v1   |        |                                            |
 |      late 8 |   20 |                                |                               | A3v2 (Testing)                                  |        |        |        | A3v2   | Merge A3v2 and A4v1?                       |
 |           9 |   21 |                                |                               | Release Sprint A4v1 (Architecture)              |        |        |        | A4v1   |                                            |
 |-------------+------+--------------------------------+-------------------------------+-------------------------------------------------+--------+--------+--------+--------+--------------------------------------------|
 |           7 |   19 | Questions and Answers          |                               | Preparing for the Exam                          | X      | X      | X      | X      | x2                                         |
 |           " |    " | "                              |                               | Finalising the Course                           | X      | X      | X      | X      | "                                          |
 |           9 |   21 |                                | Demo & Discuss A3             |                                                 | AS     | AS     | AS     | AS     | Possible? Exam weeks? Book times per group |
 |-------------+------+--------------------------------+-------------------------------+-------------------------------------------------+--------+--------+--------+--------+--------------------------------------------|
 |-------------+------+--------------------------------+-------------------------------+-------------------------------------------------+--------+--------+--------+--------+--------------------------------------------|
 |             |      | # Lectures                     |                               |                                                 | 10     | 7      | 7      | 11     |                                            |

 Note: Academic year 2017 lp4: week 13-22. Assuming exam weeks last two or three weeks.
* TODO PA1443 Seminar Instructions for Release 3 seminar
  Since they don't have anything to demo, this needs to be different.
* TODO [#A] Lectures
 Lectures
 1. [X] 01 Introduction
    - Course Intro
    - Modelling Why care
    - Overall OOD Development Methodology
    - Modelling at large?
    - OO Analysis
    - OO Design
    - Sell UML
    - Design /Design Patterns
    - Exercise in Scale
 2. [X] 02 Development Process
    - Process
    - Process vs Project vs Product
    - Waterfall vs Iterative
    - UML Process
    - [X] Process planning
      - [X] Story Points
      - [X] Burndown
      - [X] GANTT
      - [X] WBS
 3. [X] 03 Requirements Engineering
    - Elicitation
    - Goals, Features, Functions, Components
    - Good and Bad
    - Black Box vs White Box
    - Basic RE Process
    - User Stories
 4. [X] 035 User Stories and UML Use Cases
    - Use Cases
    - Use Case Diagrams
 5. [X] 04 Stucture
    - Concepts and Events
    - Class Diagrams
    - Packages
      - Use ch35
 6. [X] 045 Testing
 7. [X] 05 Behaviour
    - From Use Cases to System Sequence Diagram to Interaction Diagram
    - Contracts?
    - State Diagrams
    - From Interaction Diagrams to Class Diagrams
 8. [X] 06 Design Patterns
    - Background
    - Levels
    - Example Apply GRASP
    - Example Apply DP
    - Example Apply AP
    - [X] Discuss how this influences Design and assignments.
 9. [ ] Software Architectures
 10. [X] Quality Attributes
     - Importance of attributes and architecture
     - Different Attributes
     - Stimulus-response model
     - Tactics
 11. [ ] From Design to Code
 12. [X] Q&A
* DONE Page Analytics
  CLOSED: [2017-03-20 Mon 10:21]
  https://www.google.com/analytics/web/provision/?authuser=0#provision/SignUp/

https://github.com/blog/1672-introducing-github-traffic-analytics
* DONE Group and Team Instructions
  CLOSED: [2017-03-17 Fri 11:27]
* DONE Links in Release Sprints
  CLOSED: [2017-03-16 Thu 10:27]
* DONE Update assignment reqs template
  CLOSED: [2017-03-16 Thu 10:19]
* DONE Course PM
  CLOSED: [2017-03-08 Wed 10:23]
* DONE Resubmissions
  CLOSED: [2017-03-08 Wed 10:24]
      Assignments:
    1. *Initial Deadlines*
       Please see the [[./index.org][Start Page for each course]] for more information about the assignments and their respective deadlines.
    2. *First Resubmission*
       <2017-08-30 Wed 08:00> This deadline applies for all assignments unless otherwise agreed with the person marking the assignments and/or the examiner of the course.
    3. *Second Resubmission*
       <2018-03-26 Mon 08:00> This deadline applies for all assignments unless otherwise agreed with the person marking the assignments and/or the examiner of the course.

    Exam:
    - Dates for the written exams for the next 12 months can be checked on the student portal at https://studentportal.bth.se/web/studentportal.nsf/web.xsp/prescheduled_dates .
* DONE 3 week roll call
  CLOSED: [2017-02-17 Fri 14:09]
* DONE Pick System!
  CLOSED: [2017-02-17 Fri 13:30]
  TwitterNethack
  Busstop(Ewan) ? Not many use cases here...
* DONE Deadlines
  CLOSED: [2017-02-17 Fri 10:28]
  | Assignment | Course         | Date                   |
  |------------+----------------+------------------------|
  | Release 1  | PA1415, PA1435 | <2017-04-12 Wed 08:00> |
  | Release 1  | PA1443         | <2017-04-24 Mon 08:00> |
  |            |                |                        |
  | Release 2  | PA1415, PA1435 | <2017-05-03 Wed 08:00> |
  | Release 2  | PA1443         | <2017-05-08 Mon 08:00> |
  |            |                |                        |
  | Release 3  | PA1415, PA1435 | <2017-05-17 Wed 08:00> |
  | Release 3  | PA1443         | <2017-05-19 Fri 08:00> |
  |------------+----------------+------------------------|
* DONE PA1443 Assigment 3/4
  CLOSED: [2017-02-17 Fri 10:11]
* DONE Make sure that acceptance tests include commit/push
  CLOSED: [2017-02-17 Fri 10:11]
* DONE Seminars [7/7]
  CLOSED: [2017-02-15 Wed 13:37]
** DONE Requirements Use Cases Project Planning
   CLOSED: [2017-02-15 Wed 13:37]
** DONE Discuss Assignment 1
   CLOSED: [2017-02-14 Tue 14:56]
** DONE Structure and Design Patterns
   CLOSED: [2017-02-14 Tue 14:56]
** DONE Software Architectures
   CLOSED: [2017-02-15 Wed 13:37]
** DONE Open Discussion
   CLOSED: [2017-02-14 Tue 14:56]
** DONE Discuss Assignment 2
   CLOSED: [2017-02-14 Tue 14:56]
** DONE Demo and Discuss Assignment 3
   CLOSED: [2017-02-14 Tue 14:56]
** Booking Instructions

Hi,

Today I have scheduled the lectures. It turns out that many of the parallel courses have already placed their schedules, so there is not much wiggle-room left for us.

Therefore I would like you to schedule the seminars as quickly as possible.

The seminars are supposed to be run in groups of 25-30 people. This means the following:

| PA1415 | 73 students in total | 3 groups |
| PA1435 | 51 students in total | 2 groups |
| PA1443 | 44 students in total | 2 groups |

And I would like you to place the seminars /around/ the following times. It is not critical that they end up exactly at these times, but I would prefer them to be as close as possible.

- Seminar 1: Requirements Use Cases and Project Planning
  - PA1415 and PA1435: First half of Week 14
  - PA1443: Second half of Week 14.

- Seminar 2: Discuss Release 1
  - PA1415, PA1435: Early Week 16
  - PA1443: Late Week 17

- Seminar 3: Structure and Design Patterns
  - PA1415, PA1435, PA1443: Early Week 17

- Seminar 4: Software Architectures
  - PA1443: Week 18
  - (PA1415, PA1435: Not applicable)

- Seminar 5: Open Discussion
  - PA1415, PA1435, PA1443: Week 18

- Seminar 6: Discuss Release 2
  - PA1415, PA1435, PA1443: Week 19 

- Seminar(ish) 7: Demo and Discuss Release 3
  - Book individual times (15-20 min) with each team to demo and discuss their system, sometime during weeks 20.

I remind you that the courses are live at: https://mickesv.github.io/OODesign/ . Follow the links to each course and seminar to see instructions for the seminar. I have kept them fairly high-level at the moment -- feel free to ask if you need more information.

As I said to Raquel, if you want to divide your hours differently from what is already planned so that one of you do more "front-end" work and the other do more "back-end" work, I am fine with this. The "Discuss Assignment X" seminars may need more coordination if you choose such a model, though.

/Mikael
* DONE Sprint 0: Course Introduction
  CLOSED: [2017-02-08 Wed 14:34]
  :LOGBOOK:  
  - State "DONE"       from "TODO"       [2017-02-08 Wed 14:34]
  :END:      
* DONE Sprint: Development Methodologies
  CLOSED: [2017-02-08 Wed 14:34]
  :LOGBOOK:  
  - State "DONE"       from "TODO"       [2017-02-08 Wed 14:34]
  :END:      
* WAIT [#B] Sprint: Requirements Engineering
  Lecture ideas:
    - Requirements Elicitation Roleplay?
    - Good and Bad Requirements?
** Experiential Learning
*** Sprint Test Plan
    Go through the user stories for this sprint and make sure you have a clear understanding of how to solve each of them.

    Revisit and update your risks and contingencies section.

    Add and/or revise the following items to your glossary:
    - Requirements Engineering
      - Requirements Elicitation
      - Stakeholders
      - Software Requirements Specification (SRS)
      - RFC 2119
      - Requirements Prioritisation
    - Quality Attribute (Also: Non-functional Requirement)
    - User Story
    - Epic
    - Backlog
    - Acceptance Test
    - Use Case

    Make sure you understand what each item is, the notation for them, and how to use them either in isolation or together with the other concepts.
*** Self-Study: Requirements Interview
    Let's say you are going to build a student simulator. As a part of this you need to find out the morning practices of a typical student.
    
    Interiew a couple of student colleagues on what they do in the mornings. Try to plan beforehand, and have your colleague assess what you do good and what you can improve during the interview.
*** Self-Study: Requirements Specification
     Try to write down a common process for what you elicited above, i.e. the "getting up, getting ready, and getting to uni in the morning"-process.

     Express this process as:
    - regular requirements (consider their apartment, their mother, the bus, etc. as part of "the system")
    - user stories (think about the role they have for each part, and the motivation for why they want something done)
    - use cases  (consider their apartment, their mother, the bus, etc. as part of "the system")
*** Assignment: Requirements Document
    Your main task is to write user stories based on the system description for the assignments.

    *Tasks*
    1. Describe the system in terms of the most important workflows, as "epics". Add conditions of satisfaction to each epic.
    2. List the epics in order of importance, and add a brief motivation for why you have ordered them the way you have.
    3. Take the three most important epics, and break them down to more manageable user stories. Add conditions of satisfaction to the user stories. Order them according to priority, and add a brief motivation.

#+BEGIN_info
{{{DocStructure}}}

{{{assignment(User Stories)}}}
#+INCLUDE: "./DocStruct.org" org

3. [@3] High-level Epics
   1. Motivation for Priority
   2. Epics (ordered most important first)
4. User Stories
   1. Motivation for Priority
   2. User Stories and Epics (ordered most important first)
5. References
#+END_info    

#+BEGIN_note
*Please note* that the "User Stories and Epics" shall include /both/ the remaining epics from section 3 in the document /and/ the broken down user stories.

*Please also note* that the user stories from the epics that you break down will probably be interlaced; the least important user stories from the top-most epic need not be more important than the most important user stories from the second epic. You will thus have to review the priorities of /all/ user stories against all other user stories and epics.

*Please also also note*, when you go forward you will want each user story to have a unique ID so that you can refer back to them.
#+END_note

{{{commit}}}

#+BEGIN_tip
{{{condSat}}}

When marking this part of the assignment we are looking for the following:

0. [@0] Does the title page contain a table with authors and author contribution 
1. Size of assignment: Are there 5-10 epics and 10-30 user stories?
2. Is there a significant difference in scope between the epics and the user stories?
3. Are the epics and user stories well formed (including actor, goal, and reason)?
4. Are there relevant conditions of satisfaction for each user story/epic?
5. Is there a reasonable motivation for the priorities of the epics and user stories?
6. Does the prioritisation actually follow the motivation?
#+END_tip

*** Update Course Backlog
    How do you translate your user stories into UML use cases? How do you use the prioritised order to decide on a development schedule? Why are you specifying your requirements first as user stories if you are then going to re-specify them as UML use cases immediately afterwards?

    What other means are there for eliciting requirements? How may you gain experience in using them?

    Are there any other questions that you want answered? Add them, along with a brief strategy for how to find an answer.
** Sprint Acceptance Tests
   You are done with this sprint when:
   - You have read the Learning Materials.
   - You have created the "User Stories" document and committed/pushed it to your project repository.

   You may also have
   - Updated your Sprint Test Plan
   - Updated your Course Backlog
   - Performed self-study requirements interviews
   - Documented the results from the self-study interviews in different formats.
* DONE Sprint: Use Cases and Use Case Diagrams
  CLOSED: [2017-02-08 Wed 14:34]
  :LOGBOOK:  
  - State "DONE"       from "TODO"       [2017-02-08 Wed 14:34]
  :END:      
* DONE Release Sprint: User Stories and Use Cases		  :A1:PA1415:
  CLOSED: [2017-02-08 Wed 14:34]
  :LOGBOOK:  
  - State "DONE"       from "TODO"       [2017-02-08 Wed 14:34]
  :END:      
* DONE Release Sprint: Use Cases		    :A1:PA1435:PA1434:PA1443:
  CLOSED: [2017-02-08 Wed 14:34]
  :LOGBOOK:  
  - State "DONE"       from "TODO"       [2017-02-08 Wed 14:34]
  :END:      
* DONE Sprint: Concepts and Events
  CLOSED: [2017-02-08 Wed 14:34]
  :LOGBOOK:  
  - State "DONE"       from "TODO"       [2017-02-08 Wed 14:34]
  :END:      
* WAIT [#C] Sprint: Testing
  - [ ] Screencasts
* DONE Sprint: State Diagram
  CLOSED: [2017-02-08 Wed 14:34]
  :LOGBOOK:  
  - State "DONE"       from "TODO"       [2017-02-08 Wed 14:34]
  :END:      
* DONE Sprint: Good Interactions
  CLOSED: [2017-02-08 Wed 14:34]
  :LOGBOOK:  
  - State "DONE"       from "TODO"       [2017-02-08 Wed 14:34]
  :END:      
* DONE Sprint: Interactions and Structure
* DONE Sprint: Design Patterns
  CLOSED: [2017-02-08 Wed 14:34]
  :LOGBOOK:  
  - State "DONE"       from "TODO"       [2017-02-08 Wed 14:34]
  :END:      
* DONE Release Sprint: Object Oriented Design :A2:PA1415:PA1435:PA1435:PA1443:
  CLOSED: [2017-02-08 Wed 14:34]
  :LOGBOOK:  
  - State "DONE"       from "TODO"       [2017-02-08 Wed 14:34]
  :END:      
* TODO [#A] Sprint: Introduction to Software Architectures
  - [ ] Screencasts
  - [X] Lectures
* TODO [#A] Sprint: Software Architecture Patterns
  - [ ] Screencasts
    - Chapter 35 (Package design)
    - Go through a chapter in the AOSA-book and evaluate its use of tactics
    - [[http://resources.sei.cmu.edu/library/asset-view.cfm?assetid=31149][Len Bass on Architectural Tactics]]
  - [ ] Lectures
* WAIT Sprint: From UML to Architecture
* TODO [#A] Sprint: Implementation and Designing the User Interface
  - [ ] Screencasts
    - Go through the MVC Dictionary app
  - [ ] Lectures
* DONE Release Sprint: Implementation and Testing	   :A3:PA1415:PA1435:
  CLOSED: [2017-02-16 Thu 11:41]
* DONE Release Sprint: Architecture and Testing		 :A3:PA1443:noexport:
  CLOSED: [2017-02-17 Fri 10:11]
* WAIT Sprint: Quality Attributes
* DONE Sprint: Preparing for the Exam
  CLOSED: [2017-03-17 Fri 10:15]
* DONE Sprint 99: Finalising the Course
  CLOSED: [2017-03-17 Fri 14:12]
  - Sell Book
  - Work for me next year
  - backlog
  - Course Evaluation
    - Also: More specific questions about the assignments and group work.
    - For example, are the assignments effectively enabling learning? Ways of automating marking?
  - Pass the Torch: New system
* Working Material						   :noexport:
** DONE Three Week Rollcall assignment
   CLOSED: [2017-02-17 Fri 14:11]
** TODO Work in "The Design Pattern Way" into all sprints.
   For example: The DP way to design interactions
** TODO Review Assignments.
   - Is it necessary to do all of this?
   - Can there be a "Design Pattern" way here too
   - What about a Lean way?
** DONE Don't Forget
   CLOSED: [2017-01-26 Thu 15:44]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2017-01-26 Thu 15:44]
   :END:
   - [X] Use Cases: connect back to requirements (annotate Main Course of Events with links to Business Requirements).
   - [X] Requirements Engineering: Three parallel and different ways of writing requirments: Old (Reqs), Agile (User stories), UML (Use Cases): Add a picture of this...
   - [X] GRASP: Responsibility-driven design
   - [X] Release Sprints

   | PA1415            | PA1435              | PA1443          | PAxxxx          |
   |-------------------+---------------------+-----------------+-----------------|
   | Exam, 3hp         | Exam, 2hp           | Exam 1hp        | Exam 1hp        |
   | Assignment, 4.5hp |                     | Assignments 4hp | Assignments 3hp |
   |                   | Assignment 1, 1.5hp |                 |                 |
   |                   | Assignment 2, 0.5hp |                 |                 |
   |                   | Assignment 3, 2hp   |                 |                 |
   |                   |                     |                 |                 |
   | SUM: 7.5hp        | SUM: 6hp            | SUM: 5hp        | SUM: 4hp        |
   |-------------------+---------------------+-----------------+-----------------|

   Assignment Submissions:
   - Use Cases and Use Case Diagrams
   - Interaction Diagrams and Classes ??
   - Improved Classes and Interactions
   - Design Patterns
   - Implementation/Testing

   Assignments!
   - How many
   - Flow
   - Topic
** DONE Move Submissions from Interactions and Structure into Good Interactions ?? 
   CLOSED: [2017-01-17 Tue 14:15]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2017-01-17 Tue 14:15]
   :END:
** DONE Find a cleaner way to include Title Page and System Description in assignments.
   CLOSED: [2016-09-30 Fri 09:03]
   The MACRO for assignment title DO NOT WORK; on export it only has the latest set value, which does not work if you have more than one assignment in an export unit (a sprint.)
** DONE Fix Links in Test Sprint
   CLOSED: [2016-09-28 Wed 10:07]
   - Emil - link to his work
   - JUnit
   - Testing Tools
     - unit testing (Grunt, Junit, CPPTest, etc.)
     - Continuous Integration Tools (Jenkins, Drone.io, Travis.io, ...)
** DONE Map for different Courses   
   CLOSED: [2017-02-17 Fri 13:30]
** DONE System Descriptions for Assignments
   CLOSED: [2017-02-17 Fri 13:30]
** DONE Add "Select System for Assignments" in Sprint 0
   CLOSED: [2017-02-17 Fri 13:30]
** TODO Tie in Lectures into Sprints, with preparations I want them to do first
** DONE State Diagrams
   CLOSED: [2016-09-28 Wed 10:07]
** DONE Revisit all sprints with submissions and make sure the sprint test plan is up to date
   CLOSED: [2017-02-17 Fri 13:30]
** DONE Re-do video "Concepts and Classes": Move Objects into a different sheet
   CLOSED: [2017-03-21 Tue 10:25]
** DONE Video: Interaction Diagrams
   CLOSED: [2017-03-22 Wed 13:38]
** DONE Video: Class Diagrams
   CLOSED: [2017-03-22 Wed 13:38]
** TODO Videos: Software Architectures
   - SA Intro
   - Tactics
   - Views
   - Notation
** TODO Assignments in Architecture sprints
** DONE Chapters Used
   CLOSED: [2017-01-26 Thu 15:45]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2017-01-26 Thu 15:45]
   :END:
   | Chapter | Sprint |                                   |
   |---------+--------+-----------------------------------|
   |       1 |      1 |                                   |
   |       2 |      1 |                                   |
   |       3 |      1 |                                   |
   |       4 |    2,3 |                                   |
   |       5 |    2,3 |                                   |
   |       6 |    2,3 |                                   |
   |       7 |    2,3 |                                   |
   |       8 |      4 |                                   |
   |       9 |      4 |                                   |
   |      10 |      4 |                                   |
   |      11 |      8 |                                   |
   |      12 |        | () Req to Design                  |
   |      13 |      8 |                                   |
   |      14 |      8 |                                   |
   |      15 |      8 |                                   |
   |      16 |      8 |                                   |
   |      17 |      7 |                                   |
   |      18 |      7 |                                   |
   |      19 |      7 | Visibility                        |
   |      20 |     12 | Design to Code                    |
   |      21 |  1,3,5 |                                   |
   |      22 |        | () Tools                          |
   |      23 |        | () Iteration II                   |
   |      24 |        | () Analysis Update                |
   |      25 |      7 |                                   |
   |      26 |      9 | GoF DP                            |
   |      27 |        | () Iteration III                  |
   |      28 |        | () Activity Digrams               |
   |      29 |      6 |                                   |
   |      30 |      3 |                                   |
   |      31 |      8 | Domain Model Refinement           |
   |      32 |        | () More SSD and Contracts         |
   |      33 |     10 | Arch. Analysis                    |
   |      34 |     10 | Log. Arch. Refinement             |
   |      35 |   8,11 | Package Design                    |
   |      36 |      9 | More GoF DP                       |
   |      37 |        | ()? DP Example                    |
   |      38 |     10 | Deployment and Component Diagrams |
   |      39 |     10 | Architecture Documenting 4+1      |
   |      40 |      1 |                                   |
** Icons
https://pixabay.com/en/users/3dman_eu-1553824/
** Backlog
 | Sprint                    | Topic     | Contents                                  | User Story                                                                                                                                                                                     |   |
 |---------------------------+-----------+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+---|
 | Intro                     | Intro     | Student                                   | As a student I want to pass this course.                                                                                                                                                       |   |
 |                           | Intro     | Student                                   | As a student I want to understand how this course is structured so that I can quickly find the information I need to learn the subject.                                                        |   |
 |                           | Intro     | Student                                   | As a student I want to know why this topic is important so that I can be properly motivated.                                                                                                   |   |
 | Development Methodologies | DevMeth   | UML                                       | As a software designer I want to document my design in a standardised format so that I can communicate it to other software engineers.                                                         |   |
 |                           | DevMeth   | Development Methodologies, GANTT          | As a project manager I want to plan the project so that I can make the best use of my resources.                                                                                               |   |
 |                           | DevMeth   | WBS                                       | As a project manager I want to track the project so that I can see what the current status is.                                                                                                 |   |
 |                           | DevMeth   | Project Estimations                       | As a project manager I want to track the project so that I can forecast whether we will deliver on time or not.                                                                                |   |
 | Requirements Engineering  | RE        | Requirements                              | As a software engineer I want to get an overview of all sources of requirments that may influence which system I build.                                                                        |   |
 |                           | RE        | Requirements                              | - As a requirements engineer I want to know who may have requirements on the system we are building so that I can make sure that all needs are met.                                            |   |
 |                           | RE        | Requirements                              | As a software engineer I want to be able to extract all requirements on the system I build so that I know that I am not missing anything important.                                            |   |
 |                           | RE        | Requirements                              | - As a requirements engineer I want to have a range of methods for finding requirements so that I can choose the best method for each customer.                                                |   |
 |                           | RE        | Backlog, Iterations, Prioritization       | As a project manager I need to decide what to focus on building right now so that I best satisfy all customers' expectations.                                                                  |   |
 | Object Oriented Analysis  | OOA       | Use Cases                                 | As a software designer I want to document what the customer is telling me so that I can discuss my understanding of their requirements with them.                                              |   |
 |                           | OOA       | Use Cases                                 | As a software designer I want to document what the customer is telling me so that I can easily continue designing based on a joint understanding.                                              |   |
 |                           | OOA       | Conceptual Model                          | As a software designer I want to document my understanding of the problem domain so that I can easily transform this into an object oriented software system.                                  |   |
 |                           | OOA       | System Sequence Diagram                   | As a software designer I want to understand how users plan on interacting with the system so that I can design the right API endpoints.                                                        |   |
 |                           | OOA       | State Diagrams                            | As a software designer I want to document the states the application can be in so that I can better design them and get an overview of permissible transitions.                                |   |
 |                           | OOA       | Use Cases - Structuring                   | As a software designer I want to be able to reuse common proceduresbetween my use cases so that I only have to maintain them in one place.                                                     |   |
 | Object Oriented Design    | OOD       | Sequence/Collaboration Diagrams           | As a software designer I want to understand how domain concepts interact so that I can select the best way to implement these interactions.                                                    |   |
 |                           | OOA       | Dynamic vs Static                         | As a software designer I want to model both the /dynamic behaviour/ as well as the /static structure/ of the application so that I can communicate both to the developers.                     |   |
 |                           | OOD       | Class Diagrams (also Transition into)     | As a software implementer I want to know which methods and attributes each class contains so that I can implement them.                                                                        |   |
 |                           | OOD       | Package Diagrams / Architecture           | As a software designer I want to be able to divide my design into manageable chunks so that I can get a better overview.                                                                       |   |
 |                           | OOD       | GRASP Patterns                            | As a software designer I want to create a design that adheres to basic design principles so that I am sure that it will "hold" when I add more functionality and start maintaining the system. |   |
 | Design Patterns           | OOD/DP    | Design Patterns                           | As a software desginer I want to be able to use appropriate design patterns where applicable so that I do not have to reinvent the wheel for every problem.                                    |   |
 | Testing                   | Testing   | Testing, Testing Methodologies, Test Plan | As a product manager I want to make sure that we are building software of high quality.                                                                                                        |   |
 |                           | Testing   | Regression Testing, TDD                   | As a product manager I want to make sure that fixed bugs do not re-appear so that I can build the product incrementally.                                                                       |   |
 | Implementation            | Impl      | From Design to Code                       | As a software designer I want to understand how my design will be implemented so that I can facilitate the transition into code.                                                               |   |
 | Extra: Security           | OOD/DP/SE | Security Design Patterns                  | As a security engineer I want to use "secure" design patterns so that I can make sure that the product is secure by design.                                                                    |   |
 | Extra: Games              | OOD/DP/GE | Games Design Patterns                     | As a games developer I want to use commonly accepted game design solutions so that I can be reasonably sure it works within my quality constraints.                                            |   |
 | Extra: Web                | OOD/DP/WE | Web Engineering Patterns                  | As a web developer I want to be able to use design patterns especially suitable for web engineering so that I make the best use of my platform                                                 |   |
 | Extra: More Analysis Help | OOA       | Contracts                                 | As a software designer I want to have a way of thinking about what happens in a system event so that I do not miss any important effects on the system state.                                  |   |
** Goals and Assignments
| Kurskod | Namn                                               | Omfattning | Program                                                    |
|---------+----------------------------------------------------+------------+------------------------------------------------------------|
| PA1415  | Programvarudesign                                  |        7.5 | BSc i Spelprogrammering, BSc i IT-Säkerhet                 |
| PA1434  | Grunder i Objektorienterad Design                  |          4 | CI i IndEk                                                 |
| PA1435  | Objektorienterad Design                            |          6 | CI i Spel- och Programvaruteknik, CI i Industriell Ekonomi |
| PA1443  | Introduktion till Programvarudesign och Arkitektur |          5 | BSc i Programvaruteknik                                    |
|---------+----------------------------------------------------+------------+------------------------------------------------------------|

  | Ass | Kurskod                        | Kursmål                                                                                                                            |
  |-----+--------------------------------+------------------------------------------------------------------------------------------------------------------------------------|
  |   1 | PA1415                         | - på en grundläggande nivå i grupp kunna ta fram krav på en programvara och uttrycka dem i en kravspecifikation                    |
  |   1 | PA1415                         | - i grupp producera en översiktlig utvecklingsprojektplan baserat på en kravspecifikation                                          |
  |   2 | PA1415 (PA1435/PA1434)         | - i grupp kunna skapa en detaljerad objektorienterad design för ett mjukvaruprogram                                                |
  |   3 | PA1415                         | - i grupp kunna implementera ett mjukvaruprogram inom rimlig tid, baserat på en kravspecifikation och en objektorienterad design   |
  |   3 | PA1415 (PA1443)                | - på en grundläggande nivå i grupp kunna planera och genomföra testning av producerad programvara, baserat på en kravspecifikation |
  |   2 | PA1415 (PA1435/PA1434)         | - skapa och analysera objektorienterade artefakter uttryckta i UML                                                                 |
  |   2 | PA1415 (PA1435/PA1434/ PA1443) | - kunna motivera och använda designmönster i utvecklingen av mjukvarusystem                                                        |
  |     |                                |                                                                                                                                    |
  |     |                                | *Kunskap och förståelse*                                                                                                           |
  |   1 | PA1435/PA1434/ PA1443          | - kunna visa förståelse för grundläggande principer i objektorienterad programvaruutveckling.                                      |
  |   1 | PA1435/PA1434                  | - kunna visa förståelse för UML som modelleringsspråk.                                                                             |
  |   1 | PA1435/PA1434/ PA1443          | - kunna visa kunskap om grundläggande designprinciper.                                                                             |
  |   2 | PA1435/PA1434/ PA1443          | - kunna visa kunskap om grundläggande designmönster.                                                                               |
  |   4 | PA1443                         | - kunna visa kunskap om grundläggande mjukvaruarkitekturstilar                                                                     |
  |     |                                |                                                                                                                                    |
  |     |                                | *Färdigheter och förmåga*                                                                                                          |
  |   2 | PA1435/PA1434/ PA1443          | - kunna uttrycka strukturen och beteendet hos ett system i termer av objektorienterade koncept.                                    |
  |   2 | PA1435/PA1434                  | - kunna korrekt använda UML för att uttrycka struktur och beteende hos ett system.                                                 |
  |   3 | PA1435/PA1434                  | - kunna korrekt transformera en objektorienterad design till källkod.                                                              |
  |   2 | PA1435/PA1434                  | - kunna tillämpa designprinciper och designmönster i allmänhet och inom en särskild domän.                                         |
  |   2 | PA1443                         | - kunna tillämpa grundläggande designmönster i en objektorienterad design.                                                         |
  |   2 | PA1443                         | - kunna skapa en objektorienterad design för ett system enligt goda objektorienterade designprinciper                              |
  |   4 | PA1443                         | - kunna tillämpa grundläggande arkitekturstilar för ett mjukvarusystem                                                             |
  |   4 | PA1443                         | - kunna resonera om de kvalitetsegenskaper ett system med en viss arkitekturstil har eller bör ha                                  |
  |   4 | PA1443                         | - kunna resonera om och skapa en grundläggande testplan för ett objektorienterat system                                            |
  |     |                                |                                                                                                                                    |
  |     |                                | *Värderingsförmåga och förhållningssätt*                                                                                           |
  |   3 | PA1435/ PA1434                 | - kunna analysera källkod för eventuella förbättringar.                                                                            |
  |  34 | PA1435/PA1434/ PA1443          | - kunna analysera och kritiskt diskutera en design för eventuella förbättringar.                                                   |
  |-----+--------------------------------+------------------------------------------------------------------------------------------------------------------------------------|

  Old version
 :NOTES:
  | Course Code          | Course Goal                                                                                                                        |
  |----------------------+------------------------------------------------------------------------------------------------------------------------------------|
  | PA1415               | - på en grundläggande nivå i grupp kunna ta fram krav på en programvara och uttrycka dem i en kravspecifikation                    |
  | PA1415               | - i grupp producera en översiktlig utvecklingsprojektplan baserat på en kravspecifikation                                          |
  | PA1415/PA1435/PA1434 | - i grupp kunna skapa en detaljerad objektorienterad design för ett mjukvaruprogram                                                |
  | PA1415               | - i grupp kunna implementera ett mjukvaruprogram inom rimlig tid, baserat på en kravspecifikation och en objektorienterad design   |
  | PA1415               | - på en grundläggande nivå i grupp kunna planera och genomföra testning av producerad programvara, baserat på en kravspecifikation |
  | PA1415/PA1435/PA1434 | - skapa och analysera objektorienterade artefakter uttryckta i UML                                                                 |
  | PA1415/PA1435/PA1434 | - kunna motivera och använda designmönster i utvecklingen av mjukvarusystem                                                        |
  |                      |                                                                                                                                    |
  | PA1435/PA1434        | *Kunskap och förståelse* Efter genomförd kurs ska studenten:                                                                       |
  | PA1435/PA1434        | - kunna visa förståelse för grundläggande principer i objektorienterad programvaruutveckling.                                      |
  | PA1435/PA1434        | - kunna visa förståelse för UML som modelleringsspråk.                                                                             |
  | PA1435/PA1434        | - kunna visa kunskap om grundläggande designprinciper.                                                                             |
  | PA1435/PA1434        | - kunna visa kunskap om grundläggande designmönster.                                                                               |
  |                      |                                                                                                                                    |
  | PA1435/PA1434        | *Färdigheter och förmåga* Efter genomförd kurs ska studenten:                                                                      |
  | PA1435/PA1434        | - kunna uttrycka strukturen och beteendet hos ett system i termer av objektorienterade koncept.                                    |
  | PA1435/PA1434        | - kunna korrekt använda UML för att uttrycka struktur och beteende hos ett system.                                                 |
  | PA1435/PA1434        | - kunna korrekt transformera en objektorienterad design till källkod.                                                              |
  | PA1435/PA1434        | - kunna tillämpa designprinciper och designmönster i allmänhet och inom en särskild domän.                                         |
  |                      |                                                                                                                                    |
  | PA1435/PA1434        | *Värderingsförmåga och förhållningssätt* Efter genomförd kurs ska studenten:                                                       |
  | PA1435/PA1434        | - kunna analysera källkod för eventuella förbättringar.                                                                            |
  | PA1435/PA1434        | - kunna analysera och kritiskt diskutera en design för eventuella förbättringar.                                                   |
  |----------------------+------------------------------------------------------------------------------------------------------------------------------------|
  :END:
** Topics
  | PA1415 | PA1435 | Topic                                            |
  |--------+--------+--------------------------------------------------|
  | PA1415 |        | Development Methodologies (Waterfall/Agile/Lean) |
  | PA1415 |        | Requirements Engineering                         |
  | PA1415 |        | Project Planning                                 |
  | PA1415 |        | Work Breakdown Structures                        |
  | PA1415 |        | Project Estimations                              |
  | PA1415 |        | Testing, Different Levels                        |
  | PA1415 |        | Test Driven Development                          |
  | PA1415 |        | Test Plan                                        |
  |        | PA1435 | Basic Design Methodology (OOA, OOD)              |
  | PA1415 | PA1435 | UML - overview                                   |
  | PA1415 | PA1435 | UML Analysis                                     |
  | PA1415 | PA1435 | UML Design                                       |
  | PA1415 | PA1435 | Basic Design Patterns (GRASP)                    |
  | PA1415 | PA1435 | Design Patterns (GoF)                            |
  | PA1415 | PA1435 | From Design to Code                              |
  | PA1415 | PA1435 | Good vs Bad Design                               |
  |--------+--------+--------------------------------------------------|

** Sprints						       :OLD:noexport:
   0. [@0] Introduction/Formalia
   1. Overview of Development Methodologies
      - Waterfall
      - Agile/Lean
      - RUP
   2. Requirements Engineering
      - Requirement Elicitation
      - Requirements, User Stories, Use Cases
      - Backlog
      - Working with requirements in a Sprint
      - Requirements and Testing
   3. Planning and Estimations
      - Requirements and Prioritisations
      - Requirements for Planning
      - WBS
      - Estimations
      - Project Tracking
   4. Testing
      - Levels of Testing
      - TDD
      - Test plan
   5. Introduction to RUP/UML
      - OOA
      - OOD
      - RUP
      - UML Diagrams
      - UML Dictionary
   6. OO Analysis
      - Use Case Diagrams
      - Use Cases
      - System Sequence Diagrams
      - Conceptual Model
      - State Diagrams
      - Worked Example from Use Case to SSD and Conceptual Model
   7. OO Design
      - Interaction Diagrams
	- Sequence Diagrams
	- Collaboration Diagrams
      - Class Diagrams
   8. Basic Design Patterns
      - GRASP
   9. Common Design Patterns
   10. From Design to Code
       - Java / C++ Quirks
       - OOP in JavaScript
** Lecture Outline					       :OLD:noexport:
*** DONE Introduction (01)
    CLOSED: [2016-03-09 Wed 11:44]
    :LOGBOOK:  
    - State "DONE"       from "TODO"       [2016-03-09 Wed 11:44]
    :END:      
    Classroom only

    - Course Intro
      - About MSV
      - Course Structure
      - Lecture Structure
      - Literature
      - Tools
    - Modelling why care
      - Gorschek paper
      - Sell it anyway
    - Overall OOD Development Methodology
      - Reason: Traceability
      - Reason for all the models: Analysis triangulation
    - Modelling at large
    - OO Analysis
    - OO Design
    - UML
      - Sell UML (Abstract, Precise, Pictoral)
      - UML as a collection of models
      - UML as a methodology
      - UML wankery
    - Design / Design Patterns
    - Exercise in Scale??
*** DONE Development Process (02)
    CLOSED: [2016-03-09 Wed 14:35]
    :LOGBOOK:  
    - State "DONE"       from "TODO"       [2016-03-09 Wed 14:35]
    :END:      
    Upload: Methodologies
    - Waterfall
    - Iterative/Incremental
    - Kanban
    - SCRUM

    Classroom:
    - Process
      - Systematic
      - Disciplined
      - Quantifiable (!)
    - Process vs Project vs Product
    - Discuss:
      - What's good with waterfall?
      - Where would you do design in Scrum?
      - Where would you do design in Kanban?
    - Example: UML Process (Work through an example)
      - Use Case Diagrams
      - Use Cases
      - Conceptual Model
      - Class Diagram
      - Collaboration Diagram
      - Interaction Diagram
      - ?? Flowcharts 
*** DONE Requirements (03)
    CLOSED: [2016-03-17 Thu 09:59]
    :LOGBOOK:  
    - State "DONE"       from "TODO"       [2016-03-17 Thu 09:59]
    :END:      
    Upload: Requirements Specifications
    - ISO 830
    - RFC 2119
    - Standard Templates for Requirements "The system must do X"
    - Standard Template for User Stories
    - Use Cases
      - Use Case Diagrams
      - High Level Use Case
      - Fully Dressed (Expanded) Use Case
    - Prioritising Requirements

    Classroom:	
    - Discuss:
      - How to Find Requirements
      - Goals, Features, Functions, Components (RAM Model)
      - Good and Bad Requirements
      - Black box vs White Box
    - Basic RE process
      - (Re-use old slides)
    - Example
      - Use Case Diagram
      - High Level Use Case
      - Fully Dressed Use Case
*** DONE Modelling Structure (04)
    CLOSED: [2016-03-22 Tue 11:15]
    :LOGBOOK:  
    - State "DONE"       from "TODO"       [2016-03-22 Tue 11:15]
    :END:      
    Upload:
    - Conceptual Model Notation
      - Concept
      - Attributes
      - Associations
      - Multiplicity
      - Data Dictionary (Definition/Intention/_Glossary_)
      - Examples (Instantiated Objects)
    - Class Diagrams
      - Concept vs Class
      - Associations
      - Roles
      - Role Multiplicity
      - Attributes
      - Attribtue Types

    Classroom:
    - Discuss:
      - How to find Concepts/Attributes/Associations?
      - Difference between Attribute and Concept?
      - Multiplicity -- how to think?
    - Slides on Concept Identification
    - How to find Attributes
    - How to find Associations
    - Example:
      - Conceptual Model
      - Class Diagram
*** DONE Modelling Structure II (04)
    CLOSED: [2016-04-13 Wed 11:00]
    :LOGBOOK:  
    - State "DONE"       from "WAIT"       [2016-04-13 Wed 11:00]
    - State "WAIT"       from ""           [2016-04-13 Wed 11:00]
    - State "WAIT"       from ""           [2016-03-22 Tue 14:34]
    :END:      
    - [X] Structuring Use Cases (From Modelling Behaviour Lecture)
*** DONE Modelling Behaviour (05)
    CLOSED: [2016-04-06 Wed 14:28]
    :LOGBOOK:  
    - State "DONE"       from "TODO"       [2016-04-06 Wed 14:28]
    :END:      
    Upload:
    - Sequence Diagram
      - Actor
      - Lifeline
      - Event
    - Contract
      - Name
      - Responsibilities
      - Preconditions
      - Postconditions
    - Extended Contract
      - Name
      - Responsibilities
      - Type
      - Cross-References
      - Notes
      - Exceptions
      - Output
      - Preconditions
      - Postconditions
    - State Diagrams
      - State / Event / Transition
      - Notation
	- Nested States
	- Activity in a State
	- Actions on Transitions

    Classroom:
    - Going from Use Case to Sequence Diagram
    - System Sequence Diagram vs regular Sequence Diagram
    - System as a modelling concept
    - Contracts
      - What are they?
      - How should you interpret preconditions?
      - How to interpret postconditions?
      - Stage-and-Curtain execution
    - Discuss:
      - What are extended contracts good for?
    - State Diagrams
      - Examples + Discussion: Common Pitfalls
      - What types of Events can there be in a state diagram?
    - Discuss:
      - How do we fit state diagrams into the UML process?
*** TODO Design -- Collaboration and Responsibilities
    Upload:      
    - [ ] Interaction Diagrams, Collaboration Diagrams
      - Classes and Instances
      - Sequence Numbering
      - ...
    - [ ] Conditions, etc.
    - [ ] Real Use Cases

    Classroom:
    - [-] Discuss
      - What is the difference between Sequence diagrams and Collaboration Diagrams
    - [-] Example:
      - Go from Class Diagram to Sequence Diagram
*** DONE Design Patterns I/II (06) (08, 09)
    CLOSED: [2016-04-21 Thu 14:25]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2016-04-21 Thu 14:25]
    :END:
    Upload:
    - GRASP Patterns
      - Expert
      - Creator
      - Low Coupling
      - High Cohesion
	- Don't talk to strangers
      - Controller
      - Polymorphism
    - Design Patterns
      - Observer
      - Singleton
      - Strategy
      - State
      - Abstract Factory
    - Architecture
      - Layered
      - MVC

    Classroom:
    - Design Patterns Background
    - Levels of Patterns
      - Architecture
      - Design
      - Idioms
      - GRASP
    - Discuss:
      - Design Patterns:
	- Domain Modelling or Development tricks
	- What are they good for?
	- Limitations?
    - Example:
      - How to apply GRASP
      - How to apply DP
      - How to apply AP
    - Example:
      - How to Implement DP's
*** TODO Mapping Design to Code (07)
    Classroom:
    - Implementation Order
    - Class Creation
      - (Why bother, it's done by the tool anyway)
      - Attributes, Methods, etc.
    - Code from Sequence Diagrams
      - This is not automatic, because crappy tools.
    - Language Differences
      - Multiple Inheritance vs Inner Classes vs Anonymous Classes
      - Pointers vs References
      - Aggregation vs Strong Aggregation
      - Callback Programming (Event-Driven Arch.) (Node.js and its ilks)
	- https://blog.risingstack.com/fundamental-node-js-design-patterns/
      - Stateful EDA's??
      - Dependency Injection (Might hold a discussion on this one)
      - NULL as return values
      - Defensive Programming
	- http://c.learncodethehardway.org/book/ex27.html
	- Discuss: Good or Bad? Better to Fail Early?
** Links							   :noexport:
   IEEE 829-2008: http://www.fit.vutbr.cz/study/courses/ITS/public/ieee829.html
** Lost Puppies							   :noexport:
#+BEGIN_SRC dot :file ./images/FSprintMap.svg
digraph {
rankdir=TB;
splines=true;
node [style=filled,fillcolor="/greens3/2"];

s0 [label="Sprint 0: Course Introduction"]
devmet [label="Development Methodologies"]
re [label="Requirements Engineering"]
ucd [label="Use Cases and Use Case Diagrams"]
ce [label="Concepts and Events"]
tst [label="Testing"]
sd [label="State Diagram"]
goodint [label="Good Interactions"]
interact [label="Interactions and Structure"]
dp [label="Design Patterns"]
ui [label="Designing the User Interface"]
sa [label="Introduction to Software Architectures"]
sap [label="Software Architecture Patterns"]
impl [label="Implementation"]
exam [label="Preparing for Exam"]
s99 [label="Sprint 99: Course Wrapup"]


subgraph cluster_intro {
label="Course Introduction";
s0
}

subgraph cluster_development {
label="Software Development";
devmet -> re
}

subgraph cluster_ooa {
label="Object Oriented Analysis";
ucd -> ce -> sd
}

subgraph cluster_qa {
label="Quality Assurance";
tst
}

subgraph cluster_ood {
label="Object Oriented Design";
goodint -> interact -> dp
}


subgraph cluster_sa {
label="Software Architecture";
sa -> sap
}

subgraph cluster_impl {
label="From Design to Code";
ui -> impl
}

subgraph cluster_wrapup {
label="Course Wrap-up"
exam -> s99
}

subgraph PA1415 {
node [style=filled,fillcolor="/greens3/2"];
edge [label="PA1415", color="green", fontcolor="green"]
s0 -> devmet
re -> ucd
sd -> tst
tst-> goodint
dp -> sa
sap -> ui
impl -> exam
}

  
subgraph PA1435 {
node [style=filled,fillcolor="/blues3/2"];
edge [label="PA1435", color="blue", fontcolor="blue"]
s0 -> ucd 
sd -> tst -> goodint
dp -> sa
sap -> ui
impl -> exam
}
 
subgraph PA1443 {
node [style=filled,fillcolor="/bupu3/2"];
edge [label="PA1443", color="blueviolet", fontcolor="blueviolet"]
s0 -> ucd
ce -> goodint
dp -> impl
impl -> exam
}

}
#+END_SRC
